<%- include("../../views/partials/admin/header") %>

<div class="main-content">
    <div class="container">
        <style>
            :root {
                --primary-color: #007bff;
                --success-color: #28a745;
                --danger-color: #e74c3c;
                --sidebar-bg: #2c3e50;
                --text-color: #333;
                --card-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            }

            * {
                box-sizing: border-box;
            }

            body {
                font-family: 'Segoe UI', Arial, sans-serif;
                background-color: #ecf0f1;
                margin: 0;
                margin-left: 250px; /* Offset to match the fixed sidebar width */
                display: flex;
                min-height: 100vh;
            }

            .main-content {
                flex-grow: 1;
                padding: 2rem;
                overflow-y: auto;
            }

            .container {
                max-width: 1200px;
                margin: 0 auto;
                background-color: #fff;
                border-radius: 12px;
                box-shadow: var(--card-shadow);
                padding: 2rem;
            }

            h2 {
                font-size: 1.8rem;
                color: var(--text-color);
                margin-bottom: 1.5rem;
                font-weight: 600;
            }

            .alert {
                border-radius: 6px;
                padding: 1rem;
                margin-bottom: 1.5rem;
                font-size: 0.9rem;
            }

            .alert-success { background-color: #d4edda; color: #155724; }
            .alert-danger { background-color: #f8d7da; color: #721c24; }

            .card {
                border: none;
                border-radius: 10px;
                margin-bottom: 2rem;
                box-shadow: var(--card-shadow);
                background-color: #fff;
            }

            .card-body {
                padding: 1.5rem;
            }

            .form-row {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 1rem;
                margin-bottom: 1rem;
            }

            .form-group {
                display: flex;
                flex-direction: column;
            }

            .form-group label {
                margin-bottom: 0.5rem;
                font-weight: 500;
                color: var(--text-color);
            }

            .form-control {
                border: 1px solid #ddd;
                border-radius: 6px;
                padding: 0.75rem;
                font-size: 0.9rem;
                color: var(--text-color);
                transition: border-color 0.2s ease, box-shadow 0.2s ease;
  width: 215px;            }

            .form-control.is-invalid {
                border-color: var(--danger-color);
            }

            .invalid-feedback {
                color: var(--danger-color);
                font-size: 0.8rem;
                margin-top: 0.25rem;
            }

            .form-control:focus {
                border-color: var(--primary-color);
                box-shadow: 0 0 5px rgba(0, 123, 255, 0.3);
                outline: none;
            }

            .btn {
                padding: 0.75rem 1.5rem;
                border-radius: 6px;
                font-size: 0.9rem;
                font-weight: 500;
                border: none;
                cursor: pointer;
                transition: background-color 0.2s ease;
            }

            .btn-primary { background-color:#0e4989 ; color: #fff; }
            .btn-primary:hover { background-color: #0d3c6f; }
            .btn-success { background-color: var(--success-color); color: #fff; }
            .btn-success:hover { background-color: #218838; }
            .btn-danger { background-color: var(--danger-color); color: #fff; }
            .btn-danger:hover { background-color: #c0392b; }
            .btn-sm { padding: 0.5rem 1rem; font-size: 0.85rem; }

            .table {
                width: 100%;
                border-collapse: separate;
                border-spacing: 0;
                margin-bottom: 2rem;
                background-color: #fff;
                border-radius: 8px;
                overflow: hidden;
            }

            .table th, .table td {
                padding: 1rem;
                text-align: left;
                border-bottom: 1px solid #e9ecef;
            }

            .table-dark {
                background-color: var(--sidebar-bg);
                color: #fff;
            }

            .table-dark th {
                font-weight: 600;
                font-size: 0.95rem;
            }

            .badge {
                padding: 0.5rem 0.75rem;
                border-radius: 12px;
                font-size: 0.85rem;
                font-weight: 500;
            }

            .bg-success { background-color: var(--success-color); color: #fff; }
            .bg-danger { background-color: var(--danger-color); color: #fff; }

            .modal {
                z-index: 1050;
            }

            .modal-content {
                border-radius: 12px;
                box-shadow: var(--card-shadow);
                border: none;
            }

            .modal-header {
                background-color: #fff;
                border-bottom: none;
                padding: 1rem;
                font-size: 1.2rem;
                font-weight: 500;
                color: var(--text-color);
                justify-content: center;
                position: relative;
            }

            .modal-title {
                font-size: 1.2rem;
                color: var(--text-color);
                font-weight: 500;
            }

            .modal-body {
                padding: 1.5rem;
                display: flex;
                flex-direction: column;
                gap: 1rem;
            }

            .modal-footer {
                border-top: none;
                padding: 0 1.5rem 1.5rem;
                justify-content: center;
            }

            .modal-backdrop {
                background-color: rgba(0, 0, 0, 0.5);
            }

            .close-btn {
                position: absolute;
                right: 1rem;
                top: 1rem;
                background: none;
                border: none;
                font-size: 1.2rem;
                cursor: pointer;
                color: #aaa;
            }

            .close-btn:hover {
                color: #666;
            }

            @media (max-width: 768px) {
                body {
                    margin-left: 0; /* Remove offset for mobile as sidebar becomes horizontal */
                }
                .main-content { 
                    padding: 1rem; 
                }
                .container { 
                    padding: 1rem; 
                }
                .form-row { 
                    grid-template-columns: 1fr; 
                }
                .table th, .table td { 
                    padding: 0.75rem; 
                    font-size: 0.85rem; 
                }
            }
        </style>

        <h2>Manage Coupons</h2>

        <% if (error) { %>
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                <%= error %>
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        <% } %>
        <% if (success) { %>
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                <%= success %>
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        <% } %>

        <div class="card mb-4">
            <div class="card-body">
                <form action="/admin/coupon" method="get" class="input-group mb-4">
                    <input type="text" class="form-control" name="search" placeholder="Search coupons" value="<%= search || '' %>">
                    <button class="btn btn-primary" type="submit">Search</button>
                    <a href="/admin/coupon" class="btn btn-primary">Clear</a>
                </form>
                <form id="addCouponForm">
                    <div class="form-row">
                        <div class="form-group">
                            <label for="addName">Coupon Code</label>
                            <input type="text" class="form-control" name="name" id="addName" required minlength="3" maxlength="20">
                            <div class="invalid-feedback"></div>
                        </div>
                        <div class="form-group">
                            <label for="addStartDate">Start Date</label>
                            <input type="date" class="form-control" name="startDate" id="addStartDate" required>
                            <div class="invalid-feedback"></div>
                        </div>
                        <div class="form-group">
                            <label for="addEndDate">End Date</label>
                            <input type="date" class="form-control" name="endDate" id="addEndDate" required>
                            <div class="invalid-feedback"></div>
                        </div>
                        <div class="form-group">
                            <label for="addOfferPrice">Discount Amount</label>
                            <input type="number" class="form-control" name="offerPrice" id="addOfferPrice" min="1" required>
                            <div class="invalid-feedback"></div>
                        </div>
                        <div class="form-group">
                            <label for="addMinimumPrice">Minimum Purchase</label>
                            <input type="number" class="form-control" name="minimumPrice" id="addMinimumPrice" min="1" required>
                            <div class="invalid-feedback"></div>
                        </div>
                    </div>
                    <button type="submit" class="btn btn-primary mt-3">Add Coupon</button>
                </form>
            </div>
        </div>

        <div class="card">
            <table class="table">
                <thead class="table-dark">
                    <tr>
                        <th>Code</th>
                        <th>Start Date</th>
                        <th>Expires On</th>
                        <th>Offer Price</th>
                        <th>Minimum Order Price</th>
                        <th>Status</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    <% if (coupons && coupons.length > 0) { %>
                        <% coupons.forEach(c => { %>
                            <tr>
                                <td><%= c.name %></td>
                                <td><%= c.createdOn ? new Date(c.createdOn).toLocaleDateString('en-US') : 'N/A' %></td>
                                <td><%= c.endDate ? new Date(c.endDate).toLocaleDateString('en-US') : 'N/A' %></td>
                                <td><%= c.offerPrice %></td>
                                <td><%= c.minimumPrice %></td>
                                <td>
                                    <span class="badge <%= c.isList ? 'bg-success' : 'bg-danger' %>">
                                        <%= c.isList ? 'Active' : 'Inactive' %>
                                    </span>
                                </td>
                                <td>
                                    <button class="btn btn-sm btn-primary edit-btn" data-id="<%= c._id %>"
                                        data-coupon='<%= JSON.stringify(c) %>' style="background-color: #ffc107;">Edit</button>
                                    <button class="btn btn-sm <%= c.isList ? 'btn-danger' : 'btn-success' %> toggle-btn" 
                                            data-id="<%= c._id %>" 
                                            data-status="<%= c.isList %>">
                                        <%= c.isList ? 'Deactivate' : 'Activate' %>
                                    </button>
                                    <button class="btn btn-sm btn-danger delete-btn" data-id="<%= c._id %>">Delete</button>
                                </td>
                            </tr>
                        <% }) %>
                    <% } else { %>
                        <tr><td colspan="7" class="text-center">No coupons found</td></tr>
                    <% } %>
                </tbody>
            </table>
        </div>

        <!-- Pagination -->
        <%- include('../../views/partials/admin/pagination', { 
            baseUrl: '/admin/coupon', 
            currentPage: currentPage, 
            totalPages: totalPages, 
            queryParams: search ? `&search=${search}` : '' 
        }) %>

        <div class="modal fade" id="editModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Edit Coupon</h5>
                        <button type="button" class="close-btn" data-bs-dismiss="modal">✕</button>
                    </div>
                    <div class="modal-body">
                        <form id="editCouponForm">
                            <input type="hidden" id="editId">
                            <div class="form-group">
                                <input type="text" class="form-control" id="editName" name="name" placeholder="Coupon Code" required minlength="3" maxlength="20">
                                <div class="invalid-feedback"></div>
                            </div>
                            <div class="form-group">
                                <input type="date" class="form-control" id="editStartDate" name="startDate" placeholder="Start Date" required>
                                <div class="invalid-feedback"></div>
                            </div>
                            <div class="form-group">
                                <input type="date" class="form-control" id="editEndDate" name="endDate" placeholder="End Date" required>
                                <div class="invalid-feedback"></div>
                            </div>
                            <div class="form-group">
                                <input type="number" class="form-control" id="editOfferPrice" name="offerPrice" placeholder="Discount Amount" min="1" required>
                                <div class="invalid-feedback"></div>
                            </div>
                            <div class="form-group">
                                <input type="number" class="form-control" id="editMinimumPrice" name="minimumPrice" placeholder="Minimum Purchase" min="1" required>
                                <div class="invalid-feedback"></div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" form="editCouponForm" class="btn btn-primary">OK</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>
<script>
   if (window.location.search.includes('success') || window.location.search.includes('error')) {
        history.replaceState(null, '', window.location.pathname);
    }

    function validateForm(form) {
        let isValid = true;
        const fields = {
            name: { 
                min: 3, 
                max: 20, 
                regex: /^[A-Za-z0-9_-]+$/, 
                message: 'Coupon code must be 3-20 characters and can only contain letters, numbers, hyphens, or underscores' 
            },
            startDate: { required: true, message: 'Start date is required' },
            endDate: { required: true, message: 'End date is required' },
            offerPrice: { min: 1, message: 'Discount amount must be at least 1' },
            minimumPrice: { min: 1, message: 'Minimum purchase must be at least 1' }
        };

        Object.entries(fields).forEach(([field, rules]) => {
            const input = form.querySelector(`[name="${field}"]`);
            const feedback = input.nextElementSibling;
            input.classList.remove('is-invalid');
            feedback.textContent = '';

            if (rules.required && !input.value) {
                input.classList.add('is-invalid');
                feedback.textContent = rules.message;
                isValid = false;
            } else if (rules.min && field === 'name' && input.value.length < rules.min) {
                input.classList.add('is-invalid');
                feedback.textContent = rules.message;
                isValid = false;
            } else if (rules.max && field === 'name' && input.value.length > rules.max) {
                input.classList.add('is-invalid');
                feedback.textContent = rules.message;
                isValid = false;
            } else if (rules.regex && field === 'name' && !rules.regex.test(input.value)) {
                input.classList.add('is-invalid');
                feedback.textContent = rules.message;
                isValid = false;
            } else if (rules.min && field !== 'name' && Number(input.value) < rules.min) {
                input.classList.add('is-invalid');
                feedback.textContent = rules.message;
                isValid = false;
            }
        });

        const currentdate =new Date()
        const yesterday = new Date().setDate(currentdate.getDate() - 1);
        
        const startDate = new Date(form.querySelector('[name="startDate"]').value);

        const endDate = new Date(form.querySelector('[name="endDate"]').value);
        if(yesterday> startDate){
            form.querySelector('[name="startDate"]').classList.add('is-invalid');
            form.querySelector('[name="startDate"]').nextElementSibling.textContent = 'Start date  must be from today onwards';
            isValid = false;
        }
    if(currentdate> endDate){
            form.querySelector('[name="endDate"]').classList.add('is-invalid');
            form.querySelector('[name="endDate"]').nextElementSibling.textContent = 'End date must be after current date';
            isValid = false;
        }

        if (startDate > endDate) {
            form.querySelector('[name="startDate"]').classList.add('is-invalid');
            form.querySelector('[name="startDate"]').nextElementSibling.textContent = 'Start date must be before end date';
            isValid = false;
        }

        return isValid;
    }

    // Add Coupon
    document.getElementById('addCouponForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        const form = e.target;

        if (!validateForm(form)) return;

        const data = {
            name: form.name.value.toUpperCase(),
            startDate: form.startDate.value,
            endDate: form.endDate.value,
            offerPrice: parseInt(form.offerPrice.value),
            minimumPrice: parseInt(form.minimumPrice.value)
        };

        try {
            const res = await fetch('/admin/coupon/add', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });
            const result = await res.json();
            if (result.success) {
                Swal.fire('Success', result.message, 'success').then(() => location.reload());
            } else {
                Swal.fire('Error', result.message, 'error');
            }
        } catch (err) {
            Swal.fire('Error', 'Failed to add coupon', 'error');
        }
    });

    // Edit Coupon
    document.querySelectorAll('.edit-btn').forEach(btn => {
        btn.addEventListener('click', () => {
            const coupon = JSON.parse(btn.dataset.coupon);
            const form = document.getElementById('editCouponForm');
            form.querySelector('#editId').value = coupon._id;
            form.querySelector('#editName').value = coupon.name;
            form.querySelector('#editStartDate').value = coupon.startDate ? new Date(coupon.startDate).toISOString().split('T')[0] : '';
            form.querySelector('#editEndDate').value = coupon.endDate ? new Date(coupon.endDate).toISOString().split('T')[0] : '';
            form.querySelector('#editOfferPrice').value = coupon.offerPrice;
            form.querySelector('#editMinimumPrice').value = coupon.minimumPrice;
            new bootstrap.Modal(document.getElementById('editModal')).show();
        });
    });

    // Edit Form Submission
    document.getElementById('editCouponForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        const form = e.target;

        if (!validateForm(form)) return;

        const data = {
            name: form.name.value.toUpperCase(),
            startDate: form.startDate.value,
            endDate: form.endDate.value,
            offerPrice: parseInt(form.offerPrice.value),
            minimumPrice: parseInt(form.minimumPrice.value)
        };

        try {
            const res = await fetch(`/admin/coupon/edit/${form.querySelector('#editId').value}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });
            const result = await res.json();
            if (result.success) {
                Swal.fire('Success', result.message, 'success').then(() => location.reload());
            } else {
                Swal.fire('Error', result.message, 'error');
            }
        } catch (err) {
            Swal.fire('Error', 'Failed to update coupon', 'error');
        }
    });

    // Toggle Status
    document.querySelectorAll('.toggle-btn').forEach(button => {
        button.addEventListener('click', async () => {
            try {
                const res = await fetch(`/admin/coupon/toggle/${button.dataset.id}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });
                const result = await res.json();
                if (result.success) {
                    Swal.fire('Success', result.message, 'success').then(() => location.reload());
                } else {
                    Swal.fire('Error', result.message, 'error');
                }
            } catch (err) {
                Swal.fire('Error', 'Failed to toggle coupon status', 'error');
            }
        });
    });

    // Delete Coupon
    document.querySelectorAll('.delete-btn').forEach(button => {
        button.addEventListener('click', async () => {
            const confirm = await Swal.fire({
                title: 'Are you sure?',
                text: 'This action cannot be undone!',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#e74c3c',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Yes, delete it!'
            });

            if (confirm.isConfirmed) {
                try {
                    const res = await fetch(`/admin/coupon/delete/${button.dataset.id}`, {
                        method: 'DELETE',
                        headers: { 'Content-Type': 'application/json' }
                    });
                    const result = await res.json();
                    if (result.success) {
                        Swal.fire('Success', result.message, 'success').then(() => location.reload());
                    } else {
                        Swal.fire('Error', result.message, 'error');
                    }
                } catch (err) {
                    Swal.fire('Error', 'Failed to delete coupon', 'error');
                }
            }
        });
    });
</script>