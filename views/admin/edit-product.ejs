<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8"/>
  <meta content="width=device-width, initial-scale=1.0" name="viewport"/>
  <title>Edit Product - Skintiq</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet"/>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.6.1/cropper.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.6.1/cropper.min.js"></script>
  <style>
    body {
      margin: 0;
      font-family: Arial, sans-serif;
      display: flex;
      min-height: 100vh;
    }
    .sidebar {
      width: 250px;
      background-color: #1a252f;
      color: white;
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      transition: all 0.3s ease-in-out;
      position: fixed;
      top: 0;
      left: 0;
      height: 100vh;
      z-index: 1000;
      overflow-y: auto;
    }

    .sidebar h2 {
      background-color: #1a252f;
      color: white;
      padding: 1.2rem;
      text-align: center;
      margin: 0;
      font-size: 32px;
      letter-spacing: 1px;
    }

    .sidebar:hover {
      background-color: #1f2d3a;
    }
    .logo {
    font-family: 'Yeseva One', serif;
  font-size: 44px;
  color: #607D8B;
    }
    .nav-links {
      flex-grow: 1;
      padding-top: 1rem;
    }
    .nav-links a {
      display: flex;
      align-items: center;
      gap: 10px;
      padding: 1rem;
      text-decoration: none;
      color: #fff;
      transition: background 0.3s, padding-left 0.3s;
      font-size: 16px;
    }
    .nav-links a:hover {
      background-color: #34495e;
      padding-left: 1.5rem;
    }
    .nav-links a.active {
      background-color: #6b6666;
      padding-left: 1.5rem;
    }
    .bottom-links {
      padding: 1rem;
      border-top: 1px solid #34495e;
    }
    .bottom-links a {
      display: flex;
      align-items: center;
      gap: 10px;
      padding: 0.5rem 0;
      text-decoration: none;
      color: #fff;
      transition: background 0.3s, padding-left 0.3s;
      font-size: 16px;
    }
    .bottom-links a:hover {
      background-color: #34495e;
      padding-left: 1.5rem;
    }
    .bottom-links a.active {
      background-color: #423ce7;
      padding-left: 1.5rem;
    }
    .main-content {
      flex-grow: 1;
      padding: 2rem;
      background-color: #ecf0f1;
      margin-left: 250px;
      width: calc(100% - 250px);
    }
    .form-container {
      background: white;
      padding: 2rem;
      border-radius: 8px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      width: 100%;
      max-width: 100%;
    }
    .image-container {
      position: relative;
      width: 150px;
      height: 150px;
      border: 2px solid #ddd;
      border-radius: 8px;
      overflow: hidden;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      background-color: #f9f9f9;
      transition: transform 0.3s;
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    .image-container:hover {
      transform: scale(1.05);
    }
    .image-container img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
    .crop-button {
      position: absolute;
      bottom: 30px;
      left: 10px;
      padding: 6px 12px;
      font-size: 14px;
      background-color: rgba(0, 0, 0, 0.7);
      color: white;
      border-radius: 5px;
      border: none;
      cursor: pointer;
      display: none;
    }
    .image-container:hover .crop-button {
      display: block;
    }
    .delete-button {
      position: absolute;
      bottom: 5px;
      left: 10px;
      padding: 6px 12px;
      font-size: 14px;
      background-color: rgba(255, 0, 0, 0.7);
      color: white;
      border-radius: 5px;
      cursor: pointer;
      border: none;
      display: none;
    }
    .image-container:hover .delete-button {
      display: block;
    }
    #image-preview {
      display: flex;
      flex-wrap: wrap;
      gap: 20px;
      margin-top: 20px;
    }
    #cropper-modal {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.7);
      display: none;
      justify-content: center;
      align-items: center;
      z-index: 9999;
    }
    .modal-content {
      background-color: #fff;
      padding: 25px;
      border-radius: 10px;
      text-align: center;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
      width: 80%;
      max-width: 800px;
    }
    #cropper-image {
      max-width: 100%;
      max-height: 500px;
      border-radius: 8px;
    }
    .form-field {
      width: 100%;
      padding: 0.75rem;
      border-radius: 0.375rem;
      border: 1px solid #d1d5db;
      background: white;
      font-size: 16px;
    }
    .toggle-sidebar {
      display: none;
      position: fixed;
      top: 1rem;
      left: 1rem;
      z-index: 1100;
      padding: 0.5rem 1rem;
      background-color: #2c3e50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }
    @media (max-width: 768px) {
      .sidebar {
        transform: translateX(-250px);
      }
      .sidebar.open {
        transform: translateX(0);
      }
      .main-content {
        margin-left: 0;
        width: 100%;
      }
      .toggle-sidebar {
        display: block;
      }
      .image-container {
        width: 120px;
        height: 120px;
      }
      .form-field {
        font-size: 14px;
      }
    }
    @media (max-width: 640px) {
      .main-content {
        padding: 1rem;
      }
      .form-container {
        padding: 1rem;
      }
    }
  </style>
</head>

<body>
  <!-- Sidebar -->
  <div class="sidebar">
    <div>
      <div class="logo">
         <h2>SKINTIQ</h2>
      </div>
      <div class="nav-links">
        <a href="/admin"><i class="fas fa-tachometer-alt"></i> Dashboard</a>
        <a href="/admin/users"><i class="fas fa-users"></i> Customers</a>
        <a href="/admin/Category"><i class="fas fa-th-list"></i> Category</a>
        <a href="/admin/brand"><i class="fas fa-tags"></i> Brand</a>
        <a href="/admin/addProducts"><i class="fas fa-plus-square"></i> Add-Product</a>
        <a href="/admin/products"><i class="fas fa-box-open"></i> Products</a>
        <a href="/admin/coupon"><i class="fas fa-ticket-alt"></i> Coupon</a>
        <a href="/admin/order"><i class="fas fa-shopping-cart"></i> Orders</a>
        <a href="/admin/sales"><i class="fas fa-chart-line"></i> Sales</a>
      </div>
    </div>
    <div class="bottom-links">
      <a href="/admin/logout"><i class="fas fa-sign-out-alt"></i> Logout</a>
    </div>
  </div>

  <!-- Toggle Sidebar Button -->
  <button class="toggle-sidebar" aria-label="Toggle Sidebar">Menu</button>

  <!-- Main Content -->
  <div class="main-content">
    <div class="form-container">
      <h1 class="text-3xl font-bold mb-8 text-gray-900">Edit Product</h1>
      
      <form id="productForm" action="/admin/editProduct/<%= product._id %>" method="post" enctype="multipart/form-data" class="w-full">
        <!-- Product Details -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
          <div>
            <label for="productName" class="block mb-2 text-gray-700 font/"><input id="productName" name="productName" class="form-field" type="text" value="<%= product.productName %>" required/>
          </div>
          
          <div>
            <label for="description" class="block mb-2 text-gray-700 font-medium">Product Description *</label>
            <textarea id="description" name="description" class="form-field h-28 resize-y" required><%= product.description %></textarea>
          </div>
          
          <div>
            <label for="category" class="block mb-2 text-gray-700 font-medium">Product Category *</label>
            <select id="category" name="category" class="form-field" required>
              <option value="" disabled>Please choose a category</option>
              <% for (let i = 0; i < cat.length; i++) { %>
              <option value="<%= cat[i]._id %>" <%= product.category && product.category._id && product.category._id.toString() === cat[i]._id.toString() ? 'selected' : '' %>><%= cat[i].name %></option> <% } %>
            </select>
          </div>

          <div>
            <label for="brand" class="block mb-2 text-gray-700 font-medium">Product Brand *</label>
            <select id="brand" name="brand" class="form-field" required>
              <option value="" disabled>Please choose a brand</option>
              <% for (let i = 0; i < brand.length; i++) { %>
                <option value="<%= brand[i]._id %>" <%= product.brand && product.brand._id && product.brand._id.toString() === brand[i]._id.toString() ? 'selected' : '' %>><%= brand[i].brandName %></option>
              <% } %>
            </select>
          </div>
          
          <div>
            <label for="regularPrice" class="block mb-2 text-gray-700 font-medium">Regular Price * (â‚¹)</label>
            <input id="regularPrice" name="regularPrice" class="form-field" type="number" step="0.01" min="0" value="<%= product.regularPrice %>" required/>
          </div>
          
          <div>
            <label for="quantity" class="block mb-2 text-gray-700 font-medium">Stock Quantity *</label>
            <input id="quantity" name="quantity" class="form-field" type="number" min="0" value="<%= product.quantity %>" required/>
          </div>
          
          <div>
            <label for="skinType" class="block mb-2 text-gray-700 font-medium">Skin Type *</label>
            <input id="skinType" name="skinType" class="form-field" type="text" value="<%= product.skinType || '' %>" required/>
          </div>
          
          <div>
            <label for="skinConcern" class="block mb-2 text-gray-700 font-medium">Skin Concern *</label>
            <input id="skinConcern" name="skinConcern" class="form-field" type="text" value="<%= product.skinConcern || '' %>" required/>
          </div>
        </div>
        
        <!-- Product Images Section -->
        <div class="bg-gray-50 p-6 rounded-lg mb-8">
          <h2 class="text-xl font-bold mb-4 text-gray-900">Product Images *</h2>
          <p class="text-gray-600 mb-4">Upload at least four product images (max 8, 10MB each). Square images are recommended.</p>
          
          <div>
            <input type="file" id="imageInput" name="images" class="form-field" accept="image/*" multiple>
            <div id="image-preview" class="d-flex flex-wrap mt-3">
              <% (product.productImage || []).forEach((image, index) => { %>
                <div class="image-container" data-image-url="<%= image %>">
                  <img src="<%= image.startsWith('/') ? image : '/' + image %>" alt="Product Image <%= index %>">
                  <button type="button" class="crop-button">Crop</button>
                  <button type="button" class="delete-button">Delete</button>
                </div>
              <% }) %>
            </div>
            <input type="hidden" name="croppedImages" id="croppedImages">
            <input type="hidden" name="existingImages" id="existingImages" value='<%= JSON.stringify(product.productImage || []) %>'>
            <input type="hidden" name="deletedImages" id="deletedImages">
          </div>
        </div>
        
        <!-- Submit Button -->
        <div class="flex justify-center">
          <button id="submitButton" type="button" class="bg-green-500 hover:bg-green-600 text-white px-8 py-3 rounded-lg font-medium transition-colors duration-200">
            Update Product
          </button>
        </div>
      </form>
    </div>
  </div>

  <%- include("../partials/admin/footer") %>
  
  <script>
    // Sidebar Active Link Highlight
    const currentPath = window.location.pathname;
    const sidebarLinks = document.querySelectorAll('.nav-links a, .bottom-links a');
    sidebarLinks.forEach(link => {
      const linkPath = new URL(link.href, window.location.origin).pathname;
      if (linkPath === currentPath) {
        link.classList.add('active');
      }
    });

    // Sidebar Toggle
    const toggleButton = document.querySelector('.toggle-sidebar');
    const sidebar = document.querySelector('.sidebar');
    if (toggleButton && sidebar) {
      toggleButton.addEventListener('click', () => {
        sidebar.classList.toggle('open');
      });
    }

    // Form Functionality
    let croppedImagesArray = [];
    let deletedImagesArray = [];
    let existingImages = JSON.parse(document.getElementById('existingImages').value || '[]');
    let newImagesArray = []; // Track new images from file input

    function createMessageContainer() {
      if (!document.getElementById('messageContainer')) {
        const container = document.createElement('div');
        container.id = 'messageContainer';
        container.className = 'fixed top-4 right-4 z-50';
        document.body.appendChild(container);
      }
    }

    function showMessage(message, type = 'info') {
      createMessageContainer();
      const messageElement = document.createElement('div');
      messageElement.className = `p-4 mb-4 rounded shadow-lg ${
        type === 'success' ? 'bg-green-500 text-white' : 
        type === 'error' ? 'bg-red-500 text-white' : 
        'bg-blue-500 text-white'
      }`;
      messageElement.textContent = message;
      document.getElementById('messageContainer').appendChild(messageElement);
      setTimeout(() => {
        messageElement.remove();
      }, 3000);
    }

    // Image upload and cropping functionality
    function initImageHandler() {
      const imageInput = document.getElementById('imageInput');
      const previewContainer = document.getElementById('image-preview');

      // Attach event listeners to existing images
      document.querySelectorAll('#image-preview .image-container').forEach(container => {
        const imgElement = container.querySelector('img');
        const cropButton = container.querySelector('.crop-button');
        const deleteButton = container.querySelector('.delete-button');
        const imageUrl = container.dataset.imageUrl;

        cropButton.addEventListener('click', function(event) {
          event.preventDefault();
          const cropperModal = document.createElement('div');
          cropperModal.id = 'cropper-modal';
          cropperModal.innerHTML = `
            <div class="modal-content">
              <img id="cropper-image" src="${imgElement.src}">
              <button class="px-3 py-1 bg-green-500 text-white rounded hover:bg-green-600 mt-3" id="saveCrop">Save Crop</button>
              <button class="px-3 py-1 bg-gray-300 text-gray-700 rounded hover:bg-gray-400 mt-3" id="cancelCrop">Cancel</button>
            </div>
          `;
          document.body.appendChild(cropperModal);
          cropperModal.style.display = 'flex';

          const cropperImage = document.getElementById('cropper-image');
          const cropper = new Cropper(cropperImage, {
            aspectRatio: 1,
            viewMode: 2,
            autoCropArea: 1,
            responsive: true,
            restore: false,
            guides: true,
            center: true,
            highlight: false,
            cropBoxMovable: true,
            cropBoxResizable: true,
            toggleDragModeOnDblclick: false
          });

          document.getElementById('saveCrop').addEventListener('click', function(event) {
            event.preventDefault();
            cropper.getCroppedCanvas({
              width: 440,
              height: 440,
              fillColor: '#fff',
              imageSmoothingEnabled: true,
              imageSmoothingQuality: 'high'
            }).toBlob((blob) => {
              const croppedFile = new File([blob], `cropped-image-${Date.now()}.jpg`, {
                type: 'image/jpeg',
                lastModified: new Date().getTime()
              });
              croppedImagesArray.push(croppedFile);
              imgElement.src = URL.createObjectURL(blob);
              if (imageUrl && existingImages.includes(imageUrl)) {
                deletedImagesArray.push(imageUrl);
                existingImages = existingImages.filter(img => img !== imageUrl);
                document.getElementById('deletedImages').value = JSON.stringify(deletedImagesArray);
              }
              cropper.destroy();
              cropperModal.remove();
              showMessage(`Image cropped successfully!`, 'success');
            }, 'image/jpeg', 0.9);
          });

          document.getElementById('cancelCrop').addEventListener('click', function() {
            cropper.destroy();
            cropperModal.remove();
          });
        });

        deleteButton.addEventListener('click', function() {
          container.remove();
          if (imageUrl && existingImages.includes(imageUrl)) {
            deletedImagesArray.push(imageUrl);
            existingImages = existingImages.filter(img => img !== imageUrl);
            document.getElementById('deletedImages').value = JSON.stringify(deletedImagesArray);
            showMessage(`Image deleted successfully!`, 'success');
          }
          const blobIndex = croppedImagesArray.findIndex(blob => URL.createObjectURL(blob) === imgElement.src);
          if (blobIndex !== -1) {
            croppedImagesArray.splice(blobIndex, 1);
          }
        });
      });

      // Handle new image uploads
      imageInput.addEventListener('change', function(event) {
        const files = Array.from(event.target.files);
        newImagesArray = files; // Store new images

        files.forEach((file, index) => {
          if (!file.type.startsWith('image/')) {
            showMessage('Please upload an image file', 'error');
            return;
          }
          if (file.size > 10 * 1024 * 1024) {
            showMessage('Image size must be less than 10MB', 'error');
            return;
          }

          const reader = new FileReader();
          reader.onload = function(e) {
            const imgContainer = document.createElement('div');
            imgContainer.classList.add('image-container');

            const imgElement = document.createElement('img');
            imgElement.src = e.target.result;

            const cropButton = document.createElement('button');
            cropButton.innerText = 'Crop';
            cropButton.classList.add('crop-button');

            const deleteButton = document.createElement('button');
            deleteButton.innerText = 'Delete';
            deleteButton.classList.add('delete-button');

            cropButton.addEventListener('click', function(event) {
              event.preventDefault();
              const cropperModal = document.createElement('div');
              cropperModal.id = 'cropper-modal';
              cropperModal.innerHTML = `
                <div class="modal-content">
                  <img id="cropper-image" src="${e.target.result}">
                  <button class="px-3 py-1 bg-green-500 text-white rounded hover:bg-green-600 mt-3" id="saveCrop">Save Crop</button>
                  <button class="px-3 py-1 bg-gray-300 text-gray-700 rounded hover:bg-gray-400 mt-3" id="cancelCrop">Cancel</button>
                </div>
              `;
              document.body.appendChild(cropperModal);
              cropperModal.style.display = 'flex';

              const cropperImage = document.getElementById('cropper-image');
              const cropper = new Cropper(cropperImage, {
                aspectRatio: 1,
                viewMode: 2,
                autoCropArea: 1,
                responsive: true,
                restore: false,
                guides: true,
                center: true,
                highlight: false,
                cropBoxMovable: true,
                cropBoxResizable: true,
                toggleDragModeOnDblclick: false
              });

              document.getElementById('saveCrop').addEventListener('click', function(event) {
                event.preventDefault();
                cropper.getCroppedCanvas({
                  width: 440,
                  height: 440,
                  fillColor: '#fff',
                  imageSmoothingEnabled: true,
                  imageSmoothingQuality: 'high'
                }).toBlob((blob) => {
                  const croppedFile = new File([blob], `cropped-image-${Date.now()}.jpg`, {
                    type: 'image/jpeg',
                    lastModified: new Date().getTime()
                  });
                  croppedImagesArray.push(croppedFile);
                  imgElement.src = URL.createObjectURL(blob);
                  // Remove the original file from newImagesArray if it was cropped
                  newImagesArray = newImagesArray.filter(f => f !== file);
                  cropper.destroy();
                  cropperModal.remove();
                  showMessage(`Image cropped successfully!`, 'success');
                }, 'image/jpeg', 0.9);
              });

              document.getElementById('cancelCrop').addEventListener('click', function() {
                cropper.destroy();
                cropperModal.remove();
              });
            });

            deleteButton.addEventListener('click', function() {
              container.remove();
              const blobIndex = croppedImagesArray.findIndex(blob => URL.createObjectURL(blob) === imgElement.src);
              if (blobIndex !== -1) {
                croppedImagesArray.splice(blobIndex, 1);
              } else {
                // Remove from newImagesArray if not cropped
                newImagesArray = newImagesArray.filter(f => f !== file);
              }
              showMessage(`Image deleted successfully!`, 'success');
            });

            imgContainer.appendChild(imgElement);
            imgContainer.appendChild(cropButton);
            imgContainer.appendChild(deleteButton);
            previewContainer.appendChild(imgContainer);
          };
          reader.readAsDataURL(file);
        });
      });
    }

    function validateForm() {
      let isValid = true;

      // Define all fields with their validation rules
      const fields = {
        productName: {
          label: 'Product Name',
          selector: '[name="productName"]',
          validate: (value) => {
            if (!value.trim()) {
              return 'Product Name is required';
            }
            if (value.length < 3) {
              return 'Product Name must be at least 3 characters long';
            }
            if (value.length > 100) {
              return 'Product Name cannot exceed 100 characters';
            }
            return null;
          }
        },
        description: {
          label: 'Product Description',
          selector: '[name="description"]',
          validate: (value) => {
            if (!value.trim()) {
              return 'Product Description is required';
            }
            if (value.length < 10) {
              return 'Product Description must be at least 10 characters long';
            }
            if (value.length > 1000) {
              return 'Product Description cannot exceed 1000 characters';
            }
            return null;
          }
        },
        category: {
          label: 'Product Category',
          selector: '[name="category"]',
          validate: (value) => {
            if (!value) {
              return 'Product Category is required';
            }
            return null;
          }
        },
        brand: {
          label: 'Product Brand',
          selector: '[name="brand"]',
          validate: (value) => {
            if (!value) {
              return 'Product Brand is required';
            }
            return null;
          }
        },
        regularPrice: {
          label: 'Regular Price',
          selector: '[name="regularPrice"]',
          validate: (value) => {
            if (value === '' || isNaN(value)) {
              return 'Regular Price is required';
            }
            const numValue = parseFloat(value);
            if (numValue <= 0) {
              return 'Regular Price must be greater than 0';
            }
            if (numValue > 100000) {
              return 'Regular Price cannot exceed â‚¹100,000';
            }
            return null;
          }
        },
        quantity: {
          label: 'Stock Quantity',
          selector: '[name="quantity"]',
          validate: (value) => {
            if (value === '' || isNaN(value)) {
              return 'Stock Quantity is required';
            }
            const numValue = parseInt(value);
            if (numValue < 0) {
              return 'Stock Quantity cannot be negative';
            }
            if (numValue > 10000) {
              return 'Stock Quantity cannot exceed 10,000';
            }
            return null;
          }
        },
        skinType: {
          label: 'Skin Type',
          selector: '[name="skinType"]',
          validate: (value) => {
            if (!value.trim()) {
              return 'Skin Type is required';
            }
            if (value.length < 3) {
              return 'Skin Type must be at least 3 characters long';
            }
            if (value.length > 50) {
              return 'Skin Type cannot exceed 50 characters';
            }
            if (!/^[a-zA-Z\s,]+$/.test(value)) {
              return 'Skin Type can only contain letters, spaces, and commas';
            }
            return null;
          }
        },
        skinConcern: {
          label: 'Skin Concern',
          selector: '[name="skinConcern"]',
          validate: (value) => {
            if (!value.trim()) {
              return 'Skin Concern is required';
            }
            if (value.length < 3) {
              return 'Skin Concern must be at least 3 characters long';
            }
            if (value.length > 50) {
              return 'Skin Concern cannot exceed 50 characters';
            }
            if (!/^[a-zA-Z\s,]+$/.test(value)) {
              return 'Skin Concern can only contain letters, spaces, and commas';
            }
            return null;
          }
        }
      };

      // Collect form data for validation
      const form = document.getElementById('productForm');
      const formData = new FormData(form);

      // Validate each field
      for (const [fieldName, { label, selector, validate }] of Object.entries(fields)) {
        const field = document.querySelector(selector);
        if (!field) {
          showMessage(`${label} field not found`, 'error');
          isValid = false;
          continue;
        }
        const value = field.value;
        const error = validate(value, formData);
        if (error) {
          showMessage(error, 'error');
          field.classList.add('border-red-500');
          isValid = false;
        } else {
          field.classList.remove('border-red-500');
        }
      }

      // Image validation
      const totalImages = croppedImagesArray.length + existingImages.length + newImagesArray.length;
      if (totalImages < 4) {
        showMessage(`Please ensure at least 4 product images (you have ${totalImages})`, 'error');
        isValid = false;
      }
      if (totalImages > 8) {
        showMessage('Cannot have more than 8 images', 'error');
        isValid = false;
      }

      return isValid;
    }

    function submitProductForm() {
      if (!validateForm()) {
        return;
      }
      
      showMessage('Updating product...', 'info');
      
      const form = document.getElementById('productForm');
      const formData = new FormData(form);
      
      // Append cropped images
      croppedImagesArray.forEach((blob, index) => {
        formData.append('images', blob, `cropped-image-${index}.jpg`);
      });

      // Append new images
      newImagesArray.forEach((file, index) => {
        formData.append('images', file);
      });

      // Append deleted images
      formData.set('deletedImages', JSON.stringify(deletedImagesArray));

      fetch(form.action, {
        method: 'POST',
        body: formData
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          showMessage('Product updated successfully!', 'success');
          setTimeout(() => {
            window.location.href = '/admin/products';
          }, 2000);
        } else {
          showMessage(data.message || 'Failed to update product', 'error');
        }
      })
      .catch(error => {
        showMessage('Error submitting form', 'error');
        console.error('Form submission error:', error);
      });
    }

    document.addEventListener('DOMContentLoaded', function() {
      createMessageContainer();
      initImageHandler();
      
      const submitButton = document.getElementById('submitButton');
      if (submitButton) {
        submitButton.addEventListener('click', function(e) {
          e.preventDefault();
          submitProductForm();
        });
      }
      
      const urlParams = new URLSearchParams(window.location.search);
      const errorMessage = urlParams.get('error');
      if (errorMessage) {
        showMessage(decodeURIComponent(errorMessage), 'error');
      }
    });
  </script>
</body>
</html>