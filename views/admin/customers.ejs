
<!DOCTYPE html>
<html lang="en">
<head>
  <%- include("../../views/partials/admin/header") %>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="csrf-token" content="<%= csrfToken %>">
  <title>Customers - Skintiq Admin</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <style>
    * {
      box-sizing: border-box;
    }

    body {
      margin: 0;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background-color: #ecf0f1;
      margin-left: 250px;
    }

    .table-container {
      max-height: 600px;
      overflow-y: auto;
    }
    .table-container thead {
      position: sticky;
      top: 0;
      z-index: 10;
    }
    .action-btn {
      transition: all 0.2s ease-in-out;
    }
    .action-btn:hover {
      transform: translateY(-1px);
    }
    #confirmationModal {
      transition: opacity 0.3s ease-in-out;
    }
    #confirmationModal.hidden {
      opacity: 0;
      pointer-events: none;
    }
    #confirmationModal:not(.hidden) {
      opacity: 1;
    }
    #toast {
      transition: opacity 0.3s ease-in-out;
    }
    #toast.hidden {
      opacity: 0;
    }
    #toast:not(.hidden) {
      opacity: 1;
    }

    @media screen and (max-width: 768px) {
      body {
        margin-left: 0;
      }
      .container {
        padding-left: 1rem;
        padding-right: 1rem;
      }
    }
  </style>
</head>
<body class="bg-gray-100 min-h-screen font-sans">

  <div class="container mx-auto px-4 py-8">
    <!-- Search Card -->
    <div class="bg-white rounded-xl shadow-lg mb-6">
      <div class="p-6 border-b">
        <h4 class="text-lg font-semibold text-gray-800">Search Customers</h4>
      </div>
      <div class="p-6">
        <form action="/admin/users/" method="get" class="flex flex-col sm:flex-row sm:space-x-2 space-y-2 sm:space-y-0">
          <input 
            type="text" 
            class="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-gray-700 placeholder-gray-400" 
            placeholder="Search customers by name or email..." 
            name="search"
            value="<%= search || '' %>"
            aria-label="Search customers"
          >
          <button 
            type="submit" 
            class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            Search
          </button>
          <a 
            href="/admin/users" 
            class="px-4 py-2 bg-gray-300 text-gray-800 rounded-lg hover:bg-gray-400 transition focus:outline-none focus:ring-2 focus:ring-gray-500 flex items-center justify-center"
          >
            Clear
          </a>
        </form>
      </div>
    </div>

    <!-- Search Term Feedback -->
    <% if (search) { %>
      <p class="mb-4 text-gray-600">Showing results for: <span class="font-semibold">"<%= search %>"</span></p>
    <% } %>

    <!-- Table -->
    <div class="table-container bg-white rounded-xl shadow-lg overflow-x-auto">
      <table class="w-full min-w-[640px]">
        <thead class="bg-gray-800 text-white">
          <tr>
            <th class="py-4 px-6 text-left font-semibold">Name</th>
            <th class="py-4 px-6 text-left font-semibold">Email</th>
            <th class="py-4 px-6 text-left font-semibold">Phone Number</th>
            <th class="py-4 px-6 text-left font-semibold">Action</th>
          </tr>
        </thead>
        <tbody id="customerTable">
          <% for(let i = 0; i < data.length; i++) { %>
            <tr class="hover:bg-gray-50 transition-colors" data-user-id="<%= data[i]._id %>">
              <td class="py-4 px-6 border-b text-gray-700"><%= data[i].name %></td>
              <td class="py-4 px-6 border-b text-gray-700"><%= data[i].email %></td>
              <td class="py-4 px-6 border-b text-gray-700"><%= data[i].phone || 'N/A' %></td>
              <td class="py-4 px-6 border-b">
                <% if (data[i].isBlocked === false) { %>
                  <button 
                    class="action-btn inline-flex items-center bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-500"
                    data-action="block"
                    data-user-id="<%= data[i]._id %>"
                    aria-label="Block customer <%= data[i].name %>"
                  >
                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18.364 5.636A9 9 0 115.636 18.364M18.364 5.636L5.636 18.364"></path>
                    </svg>
                    Block
                  </button>
                <% } else { %>
                  <button 
                    class="action-btn inline-flex items-center bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-green-500"
                    data-action="unblock"
                    data-user-id="<%= data[i]._id %>"
                    aria-label="Unblock customer <%= data[i].name %>"
                  >
                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                    </svg>
                    Unblock
                  </button>
                <% } %>
              </td>
            </tr>
          <% } %>
        </tbody>
      </table>
    </div>

    <!-- Pagination -->
    <%- include('../../views/partials/admin/pagination', { 
      baseUrl: '/admin/users', 
      currentPage: currentpage, 
      totalPages: totalPages, 
      queryParams: search ? `&search=${search}` : '' 
    }) %>

    <!-- Confirmation Modal -->
    <div id="confirmationModal" class="fixed inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center hidden">
      <div class="bg-white rounded-lg p-6 max-w-sm w-full">
        <h3 id="modalTitle" class="text-lg font-semibold text-gray-800 mb-4"></h3>
        <p id="modalMessage" class="text-gray-600 mb-6"></p>
        <div class="flex justify-end space-x-4">
          <button 
            id="cancelBtn" 
            class="px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-400"
          >
            Cancel
          </button>
          <button 
            id="confirmBtn" 
            class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            Confirm
          </button>
        </div>
      </div>
    </div>

    <!-- Toast Notification -->
    <div id="toast" class="fixed bottom-4 right-4 bg-gray-800 text-white px-4 py-2 rounded-lg hidden shadow-lg">
      <span id="toastMessage"></span>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const modal = document.getElementById('confirmationModal');
      const modalTitle = document.getElementById('modalTitle');
      const modalMessage = document.getElementById('modalMessage');
      const confirmBtn = document.getElementById('confirmBtn');
      const cancelBtn = document.getElementById('cancelBtn');
      let actionUrl = '';
      let isBlockAction = false;
      let currentRow = null;

      // Show modal
      function showModal(title, message, url, isBlock, row) {
        modalTitle.textContent = title;
        modalMessage.textContent = message;
        actionUrl = url;
        isBlockAction = isBlock;
        currentRow = row;
        modal.classList.remove('hidden');
      }

      // Hide modal
      function hideModal() {
        modal.classList.add('hidden');
        actionUrl = '';
        isBlockAction = false;
        currentRow = null;
      }

      // Update table row
      function updateTableRow(row, isBlocked) {
        const actionCell = row.querySelector('td:last-child');
        const userId = row.getAttribute('data-user-id');
        if (isBlocked) {
          actionCell.innerHTML = `
            <button 
              class="action-btn inline-flex items-center bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-green-500"
              data-action="unblock"
              data-user-id="${userId}"
              aria-label="Unblock customer"
            >
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
              </svg>
              Unblock
            </button>
          `;
        } else {
          actionCell.innerHTML = `
            <button 
              class="action-btn inline-flex items-center bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-500"
              data-action="block"
              data-user-id="${userId}"
              aria-label="Block customer"
            >
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18.364 5.636A9 9 0 115.636 18.364M18.364 5.636L5.636 18.364"></path>
              </svg>
              Block
            </button>
          `;
        }
        attachActionButtonListeners();
      }

      // Attach event listeners to action buttons
      function attachActionButtonListeners() {
        document.querySelectorAll('.action-btn').forEach(button => {
          button.removeEventListener('click', handleActionClick);
          button.addEventListener('click', handleActionClick);
        });
      }

      // Handle action button clicks
      function handleActionClick(e) {
        e.preventDefault();
        const button = e.currentTarget;
        const isBlock = button.getAttribute('data-action') === 'block';
        const userId = button.getAttribute('data-user-id');
        const userName = button.closest('tr').querySelector('td').textContent;
        const title = isBlock ? 'Block Customer' : 'Unblock Customer';
        const message = isBlock 
          ? `Are you sure you want to block ${userName}? They will lose access to their account.`
          : `Are you sure you want to unblock ${userName}? They will regain access to their account.`;
        const url = isBlock ? `/admin/blockCustomer?id=${userId}` : `/admin/unblockCustomer?id=${userId}`;
        showModal(title, message, url, isBlock, button.closest('tr'));
      }

      // Initial attachment of event listeners
      attachActionButtonListeners();

      // Confirm action
      confirmBtn.addEventListener('click', async () => {
        try {
          console.log('Sending request to:', actionUrl);
          const response = await fetch(actionUrl, { 
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.content || ''
            }
          });

          console.log('Response status:', response.status);
          console.log('Response headers:', response.headers.get('content-type'));

          const contentType = response.headers.get('content-type');
          if (!contentType || !contentType.includes('application/json')) {
            const text = await response.text();
            console.log('Non-JSON response:', text);
            throw new Error('Received non-JSON response from server.');
          }

          const result = await response.json();
          if (response.ok) {
            Swal.fire({
              icon: 'success',
              title: isBlockAction ? 'Customer Blocked' : 'Customer Unblocked',
              text: result.message,
              timer: 2000,
              showConfirmButton: false
            });
            updateTableRow(currentRow, isBlockAction);
          } else {
            throw new Error(result.message || 'Server error');
          }
        } catch (error) {
          console.error('Error:', error);
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Failed to process the request. Please try again.',
            timer: 2000,
            showConfirmButton: false
          });
        }
        hideModal();
      });

      // Cancel action
      cancelBtn.addEventListener('click', hideModal);

      // Close modal on outside click
      modal.addEventListener('click', (e) => {
        if (e.target === modal) hideModal();
      });

      // Close modal on Escape key
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && !modal.classList.contains('hidden')) {
          hideModal();
        }
      });
    });
  </script>
</body>
</html>
