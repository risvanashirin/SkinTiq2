<%- include("../../views/partials/user/header.ejs") %>

<!-- Hero Banner Section -->
<div class="hero-wrap hero-bread" style="background-image: url('/images/bggg1.jpg');">
  <div class="

container">
    <div class="row no-gutters slider-text align-items-center justify-content-center">
      <div class="col-md-9 ftco-animate text-center">
        <p class="breadcrumbs">
          <span class="mr-2"><a href="/">Home</a></span> 
          <span>Shop</span>
        </p>
        <h1 class="mb-0 bread">Shop</h1>
      </div>
    </div>
  </div>
</div>

<!-- Shop Section -->
<section class="ftco-section bg-light">
  <div class="container">
    <!-- Filter Form -->
    <div class="filter-form-wrapper mb-5">
      <form id="filter-form" method="get" class="filter-form d-flex flex-wrap align-items-center gap-3">
        <!-- Sort Dropdown -->
        <select name="sort" aria-label="Sort products" class="form-select">
          <option value="">Sort By</option>
          <option value="lowToHigh" <%= sort === "lowToHigh" ? "selected" : "" %>>Price: Low to High</option>
          <option value="highToLow" <%= sort === "highToLow" ? "selected" : "" %>>Price: High to Low</option>
          <option value="aToZ" <%= sort === "aToZ" ? "selected" : "" %>>A-Z</option>
          <option value="zToA" <%= sort === "zToA" ? "selected" : "" %>>Z-A</option>
          <option value="newArrivals" <%= sort === "newArrivals" ? "selected" : "" %>>New Arrivals</option>
        </select>

        <!-- Category Dropdown -->
        <select name="category" aria-label="Filter by category" class="form-select">
          <option value="">All Categories</option>
          <% categories.forEach(cat => { %>
            <option value="<%= cat._id %>" <%= category === cat._id.toString() ? "selected" : "" %>><%= cat.name %></option>
          <% }) %>
        </select>

        <!-- Brand Dropdown -->
        <select name="brand" aria-label="Filter by brand" class="form-select">
          <option value="">All Brands</option>
          <% brands.forEach(brand => { %>
            <option value="<%= brand._id %>" <%= currentBrand === brand._id.toString() ? "selected" : "" %>><%= brand.brandName %></option>
          <% }) %>
        </select>

        <!-- Price Range Dropdowns -->
        <select name="minPrice" aria-label="Minimum price" class="form-select">
          <option value="">Min Price</option>
          <% priceRanges.from.forEach(price => { %>
            <option value="<%= price %>" <%= minPrice == price ? "selected" : "" %>><%= price %></option>
          <% }) %>
        </select>
        <select name="maxPrice" aria-label="Maximum price" class="form-select">
          <option value="">Max Price</option>
          <% priceRanges.to.forEach(price => { %>
            <option value="<%= price %>" <%= maxPrice == price ? "selected" : "" %>><%= price %></option>
          <% }) %>
        </select>

        <!-- Search Box -->
        <input type="text" name="search" placeholder="Search Products..." value="<%= search || '' %>" class="form-control">

        <!-- Submit and Reset Buttons -->
        <button type="submit" class="btn btn-primary">Apply</button>
        <button type="reset" class="btn btn-secondary" onclick="resetFilters()">Clear</button>
      </form>
    </div>

    <!-- Products Grid -->
    <div class="row" id="product-grid">
      <% if (products.length > 0) { %>
        <% products.forEach(product => { %>
          <div class="col-6 col-md-4 col-lg-3 mb-4">
            <div class="product card h-100">
              <a href="/productDetails?id=<%= product._id %>" class="img-prod">
                <img class="card-img-top img-fluid" src="<%= product.productImage && product.productImage.length > 0 ? product.productImage[0] : '/images/default-product.jpg' %>" alt="<%= product.productName %>">
                <% if (product.quantity < 1) { %>
                  <span class="out-of-stock">Out of Stock</span>
                <% } else if (product.maxOffer > 0) { %>
                  <span class="offer-badge"><%= product.maxOffer %>% OFF</span>
                <% } %>
                <div class="overlay"></div>
              </a>

              <div class="card-body d-flex flex-column">
                <div class="cat mb-2">
                  <span class="text-muted"><%= product.category && product.category.name ? product.category.name : 'Uncategorized' %></span>
                </div>

                <h3 class="card-title"><a href="/productDetails?id=<%= product._id %>"><%= product.productName %></a></h3>

                <div class="pricing mb-3">
                  <p class="price m-0">
                    <% if (product.maxOffer > 0) { %>
                      <span class="price-sale">₹<%= product.salePrice.toFixed(2) %></span>
                      <span class="price-original"><del>₹<%= product.regularPrice.toFixed(2) %></del></span>
                    <% } else { %>
                      <span class="price-sale">₹<%= product.salePrice.toFixed(2) %></span>
                    <% } %>
                  </p>
                </div>

                <div class="bottom-area d-flex gap-2 mt-auto">
                  <% if (cart && cart.cart.some(item => item.productId && item.productId._id.toString() === product._id.toString())) { %>
                    <a href="/cart" class="btn btn-outline-primary flex-fill">
                      Go to Cart <i class="ion-ios-cart ml-1"></i>
                    </a>
                  <% } else { %>
                    <form action="/add-to-cart-shop/<%= product._id %>" method="POST" class="add-to-cart-form" style="display: inline;">
                      <button type="submit" class="btn btn-outline-primary flex-fill disabled:opacity-50 disabled:cursor-not-allowed" <%= product.quantity < 1 ? 'disabled' : '' %>>
                        <span>Add to Cart <i class="ion-ios-add ml-1"></i></span>
                      </button>
                    </form>
                  <% } %>
                  <button type="button" class="btn btn-outline-danger flex-fill" onclick="addToWishlist('<%= product._id %>')">
                    <i class="ion-ios-heart mr-1"></i> Wishlist
                  </button>
                </div>
              </div>
            </div>
          </div>
        <% }) %>
      <% } else { %>
        <div class="col-12 text-center">
          <h4>No Products Found</h4>
        </div>
      <% } %>
    </div>

    <!-- Pagination -->
    <div class="row mt-5">
      <div class="col text-center">
        <nav class="pagination-container" role="navigation" aria-label="Pagination" id="pagination-container">
          <% if (totalPages > 1) { %>
            <!-- Left Arrow (Previous) -->
            <a 
              href="<%= currentPage > 1 ? `/shop?page=${currentPage - 1}${filterParams}` : '#' %>" 
              class="nav-button <%= currentPage === 1 ? 'disabled' : '' %>"
              aria-label="Previous page"
              <%= currentPage === 1 ? 'aria-disabled="true"' : '' %>
            >
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
              </svg>
            </a>

            <!-- Page Indicator -->
            <span class="page-indicator">
              Page <%= currentPage %> of <%= totalPages %>
            </span>

            <!-- Right Arrow (Next) -->
            <a 
              href="<%= currentPage < totalPages ? `/shop?page=${currentPage + 1}${filterParams}` : '#' %>" 
              class="nav-button <%= currentPage === totalPages ? 'disabled' : '' %>"
              aria-label="Next page"
              <%= currentPage === totalPages ? 'aria-disabled="true"' : '' %>
            >
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </a>
          <% } %>
        </nav>
      </div>
    </div>
  </div>
</section>

<%- include("../../views/partials/user/footer.ejs") %>

<!-- Add jQuery and SweetAlert2 -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
  // Function to check if user is logged in
  async function checkUserSession() {
    try {
      const response = await fetch('/check-session', {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' }
      });
      const result = await response.json();
      return result.isLoggedIn;
    } catch (error) {
      console.error('Error checking session:', error);
      return false;
    }
  }

  // Reset filters
  function resetFilters() {
    $('#filter-form')[0].reset();
    window.location.href = "/shop";
  }

  // Function to fetch updated products via AJAX
  function fetchUpdatedProducts() {
    $.ajax({
      url: '/shop/data',
      method: 'GET',
      data: {
        sort: $('select[name="sort"]').val(),
        category: $('select[name="category"]').val(),
        brand: $('select[name="brand"]').val(),
        minPrice: $('select[name="minPrice"]').val(),
        maxPrice: $('select[name="maxPrice"]').val(),
        search: $('input[name="search"]').val(),
        page: <%= currentPage %>
      },
      success: function (data) {
        if (data.success) {
          updateProductGrid(data.products, data.totalPages, data.currentPage);
        } else {
          console.error('Error fetching products:', data.message);
          Swal.fire({
            title: 'Error',
            text: data.message || 'Failed to fetch products.',
            icon: 'error',
            confirmButtonColor: '#007bff'
          });
        }
      },
      error: function (error) {
        console.error('Error fetching updated products:', error);
      }
    });
  }

  // Function to update product grid and pagination
  function updateProductGrid(products, totalPages, currentPage) {
    const $productContainer = $('#product-grid');
    $productContainer.fadeOut(200, function () {
      $productContainer.empty(); // Clear existing products

      if (products.length > 0) {
        products.forEach(product => {
          const productHtml = `
            <div class="col-6 col-md-4 col-lg-3 mb-4">
              <div class="product card h-100">
                <a href="/productDetails?id=${product._id}" class="img-prod">
                  <img class="card-img-top img-fluid" src="${product.productImage && product.productImage.length > 0 ? product.productImage[0] : '/images/default-product.jpg'}" alt="${product.productName}">
                  ${product.quantity < 1 ? '<span class="out-of-stock">Out of Stock</span>' : product.maxOffer > 0 ? `<span class="offer-badge">${product.maxOffer}% OFF</span>` : ''}
                  <div class="overlay"></div>
                </a>
                <div class="card-body d-flex flex-column">
                  <div class="cat mb-2">
                    <span class="text-muted">${product.category && product.category.name ? product.category.name : 'Uncategorized'}</span>
                  </div>
                  <h3 class="card-title"><a href="/productDetails?id=${product._id}">${product.productName}</a></h3>
                  <div class="pricing mb-3">
                    <p class="price m-0">
                      ${product.maxOffer > 0 ? `<span class="price-sale">₹${product.salePrice.toFixed(2)}</span><span class="price-original"><del>₹${product.regularPrice.toFixed(2)}</del></span>` : `<span class="price-sale">₹${product.salePrice.toFixed(2)}</span>`}
                    </p>
                  </div>
                  <div class="bottom-area d-flex gap-2 mt-auto">
                    ${product.inCart ? `
                      <a href="/cart" class="btn btn-outline-primary flex-fill">
                        Go to Cart <i class="ion-ios-cart ml-1"></i>
                      </a>
                    ` : `
                      <form action="/add-to-cart-shop/${product._id}" method="POST" class="add-to-cart-form" style="display: inline;">
                        <button type="submit" class="btn btn-outline-primary flex-fill ${product.quantity < 1 ? 'disabled:opacity-50 disabled:cursor-not-allowed' : ''}" ${product.quantity < 1 ? 'disabled' : ''}>
                          <span>Add to Cart <i class="ion-ios-add ml-1"></i></span>
                        </button>
                      </form>
                    `}
                    <button type="button" class="btn btn-outline-danger flex-fill" onclick="addToWishlist('${product._id}')">
                      <i class="ion-ios-heart mr-1"></i> Wishlist
                    </button>
                  </div>
                </div>
              </div>
            </div>
          `;
          $productContainer.append(productHtml);
        });
      } else {
        $productContainer.append('<div class="col-12 text-center"><h4>No Products Found</h4></div>');
      }

      // Update pagination
      const $paginationContainer = $('#pagination-container');
      $paginationContainer.empty();
      if (totalPages > 1) {
        const filterParams = new URLSearchParams({
          sort: $('select[name="sort"]').val(),
          category: $('select[name="category"]').val(),
          brand: $('select[name="brand"]').val(),
          minPrice: $('select[name="minPrice"]').val(),
          maxPrice: $('select[name="maxPrice"]').val(),
          search: $('input[name="search"]').val()
        }).toString();
        const paginationHtml = `
          <a 
            href="${currentPage > 1 ? `/shop?page=${currentPage - 1}&${filterParams}` : '#'}" 
            class="nav-button ${currentPage === 1 ? 'disabled' : ''}"
            aria-label="Previous page"
            ${currentPage === 1 ? 'aria-disabled="true"' : ''}
          >
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
            </svg>
          </a>
          <span class="page-indicator">
            Page ${currentPage} of ${totalPages}
          </span>
          <a 
            href="${currentPage < totalPages ? `/shop?page=${currentPage + 1}&${filterParams}` : '#'}" 
            class="nav-button ${currentPage === totalPages ? 'disabled' : ''}"
            aria-label="Next page"
            ${currentPage === totalPages ? 'aria-disabled="true"' : ''}
          >
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
            </svg>
          </a>
        `;
        $paginationContainer.append(paginationHtml);
      }

      $productContainer.fadeIn(200);

      // Re-attach event listeners for add-to-cart forms
      $('.add-to-cart-form').off('submit').on('submit', async function (e) {
        e.preventDefault();
        const isLoggedIn = await checkUserSession();
        if (!isLoggedIn) {
          Swal.fire({
            title: 'Log In Required',
            text: 'Please log in to add items to your cart.',
            icon: 'warning',
            confirmButtonText: 'Log In',
            confirmButtonColor: '#007bff'
          }).then((result) => {
            if (result.isConfirmed) {
              window.location.href = '/login';
            }
          });
          return;
        }

        const $form = $(this);
        const action = $form.attr('action');
        $.ajax({
          url: action,
          method: 'POST',
          success: function (data) {
            if (data.success) {
              Swal.fire({
                title: 'Product added to cart!',
                icon: 'success',
                showCancelButton: true,
                confirmButtonText: 'Go to Cart',
                cancelButtonText: 'Continue Shopping',
                confirmButtonColor: '#007bff'
              }).then((result) => {
                if (result.isConfirmed) {
                  window.location.href = '/cart';
                } else {
                  fetchUpdatedProducts(); // Refresh products
                }
              });
            } else if (data.error === 'out_of_stock') {
              Swal.fire({
                title: 'Out of stock!',
                text: data.message || 'Not enough stock available.',
                icon: 'error',
                confirmButtonColor: '#007bff'
              });
            } else if (data.message === 'This item is already in your cart. You can update the quantity in your cart.') {
              Swal.fire({
                title: 'Item Already in Cart',
                text: data.message,
                icon: 'warning',
                confirmButtonColor: '#007bff'
              });
            } else {
              Swal.fire({
                title: 'Error',
                text: data.message || 'Failed to add product to cart.',
                icon: 'error',
                confirmButtonColor: '#007bff'
              });
            }
          },
          error: function (error) {
            console.error('Error adding to cart:', error);
            Swal.fire({
              title: 'Error',
              text: 'Something went wrong. Please try again.',
              icon: 'error',
              confirmButtonColor: '#007bff'
            });
          }
        });
      });
    });
  }

  // Poll every 10 seconds for updates
  setInterval(fetchUpdatedProducts, 10000);

  // Initial fetch on page load
  fetchUpdatedProducts();

  // Handle filter form submission
  $('#filter-form').on('submit', function (e) {
    e.preventDefault();
    fetchUpdatedProducts();
  });

  // Add-to-wishlist function
  async function addToWishlist(productId) {
    const isLoggedIn = await checkUserSession();
    if (!isLoggedIn) {
      Swal.fire({
        title: 'Log In Required',
        text: 'Please log in to add items to your wishlist.',
        icon: 'warning',
        confirmButtonText: 'Log In',
        confirmButtonColor: '#007bff'
      }).then((result) => {
        if (result.isConfirmed) {
          window.location.href = '/login';
        }
      });
      return;
    }

    try {
      const response = await fetch('/addToWishlist', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ productId })
      });
      const result = await response.json();

      if (result.status === true) {
        Swal.fire({
          icon: 'success',
          title: 'Added to Wishlist',
          text: result.message || 'Product added to your wishlist!',
          confirmButtonColor: '#007bff'
        });
      } else {
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: result.message || 'Failed to add to wishlist',
          confirmButtonColor: '#007bff'
        });
      }
    } catch (error) {
      console.error('Error adding to wishlist:', error);
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: 'An error occurred while adding to wishlist',
        icon: 'error',
        confirmButtonColor: '#007bff'
      });
    }
  }
</script>

<!-- Existing styles remain unchanged -->
<style>
  /* Hero Banner */
  .hero-wrap {
    position: relative;
    background-size: cover;
    background-position: center;
    padding: clamp(50px, 10vw, 100px) 0;
  }

  .slider-text {
    min-height: clamp(200px, 50vw, 300px);
  }

  .breadcrumbs {
    font-size: clamp(0.8rem, 2.5vw, 0.9rem);
    margin-bottom: clamp(10px, 2vw, 15px);
  }

  .bread {
    font-size: clamp(1.5rem, 5vw, 2.5rem);
    font-weight: 700;
    color: #fff;
    text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.5);
  }

  /* Filter Form */
  .filter-form-wrapper {
    margin-bottom: clamp(1.5rem, 4vw, 2rem);
  }

  .filter-form {
    gap: clamp(0.5rem, 2vw, 1rem);
    flex-wrap: wrap;
    align-items: center;
    padding-left: 0;
    justify-content: center;
  }

  .filter-form select,
  .filter-form input,
  .filter-form button {
    height: clamp(36px, 10vw, 40px);
    font-size: clamp(0.8rem, 2.2vw, 0.9rem);
    border-radius: 9px;
    min-height: 36px;
    touch-action: manipulation;
  }

  .filter-form select {
    min-width: clamp(120px, 30vw, 150px);
    max-width: 100%;
  }

  .filter-form input {
    width: clamp(150px, 50vw, 300px);
    max-width: 100%;
  }

  .filter-form button {
    padding: clamp(0.5rem, 2vw, 0.75rem) clamp(1rem, 3vw, 1.5rem);
    min-width: clamp(80px, 20vw, 100px);
  }

  /* Product Card */
  .product.card {
    border: none;
    transition: transform 0.3s;
  }

  .product.card:hover {
    transform: translateY(-5px);
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
  }

  .product .card-img-top {
    aspect-ratio: 1/1;
    object-fit: cover;
    height: clamp(150px, 40vw, 250px);
  }

  .product .offer-badge,
  .product .out-of-stock {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background: rgba(128, 128, 128, 0.5);
    color: white;
    font-weight: bold;
    font-size: clamp(0.75rem, 2.2vw, 0.9rem);
    padding: clamp(5px, 1.5vw, 8px);
    text-align: center;
    z-index: 10;
  }

  .product .out-of-stock {
    background: rgba(255, 255, 255, 0.8);
    color: #dc3545;
  }

  .product .card-body {
    padding: clamp(1rem, 3vw, 1.5rem);
  }

  .product .card-title {
    font-size: clamp(0.9rem, 2.5vw, 1.1rem);
    margin-bottom: clamp(0.3rem, 1vw, 0.5rem);
    min-height: clamp(2.5rem, 6vw, 3rem);
    color: #8B8000;
  }

  .product .card-title a {
    color: #8B8000;
  }

  .product .bottom-area {
    gap: clamp(0.3rem, 1vw, 0.5rem);
  }

  .product .bottom-area .btn {
    font-size: clamp(0.8rem, 2.2vw, 0.9rem);
    padding: clamp(0.3rem, 1vw, 0.5rem);
    min-height: 36px;
    touch-action: manipulation;
  }

  .product .pricing {
    display: flex;
    align-items: baseline;
    gap: 8px;
  }

  .product .price-sale {
    font-size: clamp(1rem, 2.8vw, 1.2rem);
    color: #030a17c4;
    font-weight: bold;
  }

  .product .price-original {
    font-size: clamp(0.8rem, 2.2vw, 0.9rem);
    color: #666;
  }

  .product .price-original del {
    text-decoration: line-through;
    text-decoration-thickness: 2px;
  }

  /* Pagination */
  .pagination-container {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: clamp(0.5rem, 2vw, 1rem);
    padding: clamp(1rem, 3vw, 1.5rem) 0;
  }

  .pagination-container a {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: clamp(0.3rem, 1vw, 0.5rem);
    border-radius: 0.375rem;
    transition: all 0.3s ease;
    text-decoration: none;
    min-width: clamp(2rem, 5vw, 2.25rem);
    height: clamp(2rem, 5vw, 2.25rem);
  }

  .pagination-container a.nav-button {
    background-color: #2563eb;
    color: #ffffff;
  }

  .pagination-container a.nav-button:hover:not(.disabled) {
    background-color: #1d4ed8;
  }

  .pagination-container a.disabled {
    background-color: #d1d5db;
    color: #9ca3af;
    cursor: not-allowed;
    pointer-events: none;
  }

  .pagination-container .page-indicator {
    font-size: clamp(0.8rem, 2.2vw, 0.875rem);
    color: #374151;
    font-weight: 500;
  }

  /* Responsive Adjustments */
  @media (max-width: 991.98px) {
    .hero-wrap {
      padding: clamp(40px, 8vw, 80px) 0;
    }

    .slider-text {
      min-height: clamp(150px, 40vw, 250px);
    }

    .bread {
      font-size: clamp(1.2rem, 4vw, 2rem);
    }

    .filter-form select,
    .filter-form input {
      min-width: clamp(100px, 25vw, 120px);
    }

    .filter-form button {
      padding: clamp(0.4rem, 1.5vw, 0.6rem) clamp(0.8rem, 2.5vw, 1.2rem);
    }

    .product .card-title {
      font-size: clamp(0.85rem, 2.2vw, 0.95rem);
    }

    .product .offer-badge,
    .product .out-of-stock {
      font-size: clamp(0.7rem, 2vw, 0.85rem);
      padding: clamp(4px, 1.2vw, 6px);
    }
  }

  @media (max-width: 576px) {
    .hero-wrap {
      padding: clamp(30px, 6vw, 60px) 0;
    }

    .slider-text {
      min-height: clamp(120px, 30vw, 200px);
    }

    .bread {
      font-size: clamp(1rem, 3.5vw, 1.5rem);
    }

    .filter-form {
      flex-direction: column;
      align-items: stretch;
    }

    .filter-form select,
    .filter-form input,
    .filter-form button {
      width: 100%;
      max-width: 100%;
    }

    .product .offer-badge,
    .product .out-of-stock {
      font-size: clamp(0.65rem, 1.8vw, 0.75rem);
      padding: clamp(3px, 1vw, 5px);
    }

    .product .card-img-top {
      height: clamp(120px, 35vw, 200px);
    }

    .col-6 {
      flex: 0 0 100%;
      max-width: 100%;
    }
  }

  .btn.btn-primary {
    background: #9e8d4a;
    border: 1px solid #dbcc8f;
    color: #fff;
  }

  /* Loading spinner */
  .loading-spinner {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center;
    color: #007bff;
    font-size: 1rem;
    z-index: 1000;
  }
</style>