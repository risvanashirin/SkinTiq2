<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shopping Cart</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"/>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css" />
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap" rel="stylesheet"/>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        body {
            font-family: 'Poppins', sans-serif;
            overflow-x: hidden;
            background-color: #f3f4f6;
        }

        :root {
            --accent-gradient: linear-gradient(45deg, #44351c, #efe10a);
            --accent-hover: linear-gradient(45deg, #3a2e17, #d6cc09);
            --danger-color: #dc2626;
            --danger-hover: #b91c1c;
            --success-color: #16a34a;
            --success-hover: #13843b;
        }
.btn-gradient {
  background: var(--accent-gradient);
  border: none;
  color: #ffffff;
  transition: all 0.3s ease;
  border-radius: 7px;
  padding: 0.75rem 1.5rem;
  font-weight: 600;
  height: 48px;
  text-decoration: none;

  display: flex;
  align-items: center;
  justify-content: center;

  /* âœ… Prevent multi-line */
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis; /* Optional: adds "..." if text overflows */
}


        .btn-gradient:hover {
            background: var(--accent-hover);
            box-shadow: 0 4px 10px rgba(68, 53, 28, 0.3);
            transform: translateY(-1px);
        }

        .sidebar {
            height: 100vh;
            background: #ffffff;
            padding: 2rem 1.5rem;
            border-right: 1px solid #e5e7eb;
            position: fixed;
            top: 0;
            left: 0;
            width: 250px;
            transition: transform 0.3s ease;
        }

        .sidebar a {
            color: #1f2937;
            text-decoration: none;
            padding: 1rem;
            margin: 0.5rem 0;
            border-radius: 8px;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .sidebar a:hover,
        .sidebar .active {
            background: var(--accent-gradient);
            color: #fff;
            transform: translateX(5px);
        }

        .sidebar i {
            width: 25px;
            text-align: center;
        }

        .sidebar-toggle {
            display: none;
            position: fixed;
            top: 1rem;
            left: 1rem;
            z-index: 60;
            background: linear-gradient(90deg, #7e6b00, #a68c00);
            color: #fff;
            padding: 0.6rem;
            border-radius: 8px;
            border: none;
            box-shadow: 0 2px 6px rgba(126, 107, 0, 0.2);
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .sidebar-toggle:hover {
            background: linear-gradient(90deg, #655700, #8c7500);
            box-shadow: 0 4px 10px rgba(126, 107, 0, 0.3);
        }

        .sidebar-toggle svg {
            width: 20px;
            height: 20px;
            fill: #fff;
        }

        .cart-container {
            background: linear-gradient(145deg, #ffffff, #f5f5f5);
            border: none;
            border-radius: 12px;
            padding: 2rem;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
            transition: margin-left 0.3s ease, box-shadow 0.3s ease;
            will-change: transform;
            position: relative;
            max-width: min(100%, 920px);
            margin: 0 auto;
            margin-top: 4vh;
            min-height: calc(92vh - 2rem);
            box-sizing: border-box;
            padding-right: 200px;
        }

        .cart-container:hover {
            box-shadow: 0 6px 16px rgba(126, 107, 0, 0.15);
        }

        .cart-row {
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 1rem;
            padding: 1rem;
            background: white;
            border: 1px solid #e5e7eb;
            border-radius: 8px;
            margin-bottom: 1rem;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
            transition: box-shadow 0.3s ease;
            width: 529px;
        }

        .cart-row:hover {
            box-shadow: 0 6px 16px rgba(126, 107, 0, 0.15);
        }

        .cart-row img {
            width: 60px;
            height: 60px;
            object-fit: cover;
            border-radius: 0.5rem;
        }

        .quantity-control {
            display: flex;
            align-items: center;
            justify-content: space-between;
            width: 90px;
            border: 1px solid #d1d5db;
            border-radius: 0.375rem;
        }

        .quantity-control button {
            padding: 0.25rem 0.5rem;
            cursor: pointer;
            /* background: #666161; */
            color: #151313;
            font-weight: bold;
            transition: all 0.3s ease;
            border-radius:4px;
            height: 30px;
        }

        .quantity-control button:hover {
            background: #c0bfbf;
            box-shadow: 0 2px 6px rgba(68, 53, 28, 0.3);
        }

        .quantity-control input {
            width: 40px;
            text-align: center;
            border: none;
            outline: none;
        }

        .summary-section {
            background: white;
            padding: 1.5rem;
            border: 1px solid #e5e7eb;
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
            transition: box-shadow 0.3s ease;
        }

        .summary-section:hover {
            box-shadow: 0 6px 16px rgba(126, 107, 0, 0.15);
        }

        .btn-custom {
            background: var(--accent-gradient);
            color: #fff;
            border: none;
            border-radius: 9999px;
            padding: 0.75rem 1.5rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 2px 6px rgba(126, 107, 0, 0.2);
            display: inline-block;
        }

        .btn-custom:hover {
            background: var(--accent-hover);
            transform: translateY(-1px);
            box-shadow: 0 4px 10px rgba(126, 107, 0, 0.3);
        }

        input[type="number"]::-webkit-inner-spin-button,
        input[type="number"]::-webkit-outer-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }

        input[type="number"] {
            -moz-appearance: textfield;
        }

        @media (max-width: 768px) {
            .sidebar {
                width: min(220px, 70vw);
                transform: translateX(-100%);
            }

            .sidebar.open {
                transform: translateX(0);
            }

            .sidebar-toggle {
                display: block;
            }

            .sidebar-partial.open ~ .sidebar-toggle {
                display: none;
            }

            .cart-container {
                margin: 0 auto;
                padding: 1.5rem;
                border-radius: 10px;
                margin-top: 10vh;
                min-height: calc(90vh - 2rem);
                max-width: min(100%, 800px);
            }

            .cart-container.sidebar-open {
                margin-left: min(220px, 70vw);
                max-width: min(100%, 800px);
            }

            .cart-row {
                flex-direction: column;
                align-items: flex-start;
            }

            .btn-container {
                flex-direction: column;
                gap: 1rem;
            }
        }

        @media (max-width: 480px) {
            .cart-container {
                padding: 1rem;
                border-radius: 8px;
                margin-top: 8vh;
                min-height: calc(88vh - 2rem);
                max-width: min(100%, 800px);
            }

            .cart-container.sidebar-open {
                margin-left: min(180px, 65vw);
                max-width: min(100%, 800px);
            }

            .sidebar-toggle {
                padding: 0.5rem;
            }

            .sidebar-toggle svg {
                width: 18px;
                height: 18px;
            }
        }

        @media (max-width: 320px) {
            .cart-container {
                padding: 0.8rem;
                border-radius: 6px;
                max-width: min(100%, 800px);
            }

            .cart-container.sidebar-open {
                margin-left: min(160px, 60vw);
                max-width: min(100%, 800px);
            }
        }
       
    </style>
</head>
<body>
    <%- include("../partials/user/sidebar.ejs") %>

    <button class="sidebar-toggle" aria-label="Toggle sidebar">
        <svg viewBox="0 0 24 24" aria-hidden="true">
            <path d="M3 6h18v2H3V6zm0 5h18v2H3v-2zm0 5h18v2H3v-2z"/>
        </svg>
    </button>

    <div class="cart-container mx-auto pt-24 md:pt-10">
        <div class="flex flex-col items-center mb-6">
            <h1 class="text-2xl font-bold text-gray-800 text-center">Your Cart</h1>
        </div>

        <% if (typeof error !== 'undefined' && error) { %>
            <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6" role="alert">
                <%= error %>
            </div>
        <% } %>

        <% if (!cart || cart.cart.length === 0) { %>
            <div class="bg-white p-6 rounded-lg border border-gray-200 text-center shadow-md hover:shadow-lg transition">
                <p class="text-gray-600 text-lg">Your cart is empty.</p>
                <div>
<a href="/shop"
   class="inline-block no-underline text-center text-white font-semibold rounded-md px-4 py-2 sm:px-6 sm:py-2.5 text-sm sm:text-base 
          shadow-md hover:shadow-lg transition-all duration-300"
   style="background: var(--accent-gradient);">
  Continue Shopping
</a>


                </div>
            </div>
        <% } else { %>
            <div class="flex flex-col md:flex-row gap-6">
                <div class="flex-1">
                    <% cart.cart.forEach(item => { %>
                        <div class="cart-row" data-product-id="<%= item.productId ? item.productId._id : '' %>">
                            <div class="flex-shrink-0">
                                <button onclick="removeProduct('<%= item.productId ? item.productId._id : '' %>')" class="text-gray-600 hover:text-red-500">
<i class="fas fa-times"></i>
                                </button>
                            </div>
                       <div class="flex-shrink-0">
  <% if (item.productId && item.productId.productImage && item.productId.productImage.length > 0) { %>
    <a href="/productDetails?id=<%= item.productId._id %>">
      <img src="<%= item.productId.productImage[0] %>" alt="<%= item.productId.productName || 'Product' %>" class="w-20 h-20 object-cover rounded-lg">
    </a>
  <% } else { %>
    <div class="w-20 h-20 bg-gray-200 flex items-center justify-center rounded-lg">
      <span class="text-gray-500">No Image</span>
    </div>
  <% } %>
</div>

                            <div class="flex-1">
                                <p class="text-gray-800 font-semibold">
                                    <%= item.productId ? item.productId.productName : 'Product Not Found' %>
                                </p>
                            </div>
                            <div class="w-20 text-center">
                                <p class="text-gray-800 product-price">
                                    â‚¹<%= item.productId && item.productId.salePrice ? item.productId.salePrice.toFixed(2) : 'N/A' %>
                                </p>
                            </div>
                            <div class="w-24">
                                <div class="quantity-control">
                                    <button type="button" class="decrease-btn">-</button>
                                    <input type="number" name="quantity" value="<%= item.quantity %>" min="1" class="quantity-input appearance-none" readonly>
                                    <button type="button" class="increase-btn">+</button>
                                </div>
                            </div>
                            <div class="w-24 text-center">
                                <p class="text-gray-800 subtotal font-semibold">
                                    â‚¹<%= item.productId && item.productId.salePrice ? (item.productId.salePrice * item.quantity).toFixed(2) : 'N/A' %>
                                </p>
                            </div>
                        </div>
                    <% }) %>
                </div>
                <div class="w-full md:w-80">
                    <div class="summary-section">
                        <div class="flex justify-between mb-2">
                            <p class="text-gray-600">Subtotal:</p>
                            <p class="text-gray-800 total-price">â‚¹<%= cart.totalPrice ? cart.totalPrice.toFixed(2) : '0.00' %></p>
                        </div>
                     
                        <div class="flex justify-between border-t pt-2">
                            <p class="text-gray-800 font-bold">Total:</p>
                            <p class="text-gray-800 font-bold total-price">â‚¹<%= cart.totalPrice ? cart.totalPrice.toFixed(2) : '0.00' %></p>
                        </div>
                    </div>
                    <div class="btn-container flex justify-center gap-4 mt-6">
                        <a href="/checkout" class="btn-gradient">Check Out</a>
                        <a href="/shop" class="btn-gradient">Continue Shopping</a>
                    </div>
                </div>
            </div>
        <% } %>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const toggleButton = document.querySelector('.sidebar-toggle');
            const sidebar = document.querySelector('.sidebar-partial');
            const cartContainer = document.querySelector('.cart-container');

            // Ensure sidebar is hidden and toggle is visible on load for mobile
            if (window.innerWidth <= 768) {
                sidebar.classList.remove('open');
                cartContainer.classList.remove('sidebar-open');
                toggleButton.style.display = 'block';
            }

            // Toggle sidebar open
            if (toggleButton && sidebar && cartContainer) {
                toggleButton.addEventListener('click', () => {
                    sidebar.classList.add('open');
                    cartContainer.classList.add('sidebar-open');
                    toggleButton.style.display = 'none';
                });
            }

            // Handle window resize
            window.addEventListener('resize', () => {
                if (window.innerWidth > 768) {
                    sidebar.classList.remove('open');
                    cartContainer.classList.remove('sidebar-open');
                    toggleButton.style.display = 'none';
                } else {
                    if (!sidebar.classList.contains('open')) {
                        toggleButton.style.display = 'block';
                    }
                }
            });
        });

        async function updateQuantity(productId, action) {
            const cartRow = document.querySelector(`.cart-row[data-product-id="${productId}"]`);
            const quantityInput = cartRow.querySelector('.quantity-input');
            const currentQuantity = parseInt(quantityInput.value);
            const maxLimit = 5;
            let newQuantity = currentQuantity;

            if (action === 'increase') {
                if (currentQuantity >= maxLimit) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Maximum Limit Reached',
                        text: 'You can only add up to 5 of this item.',
                        showConfirmButton: true
                    });
                    return;
                }
                newQuantity = currentQuantity + 1;
            } else if (action === 'decrease') {
                if (currentQuantity <= 1) {
                    const result = await Swal.fire({
                        icon: 'warning',
                        title: 'Remove Item',
                        text: 'Do you want to remove this item from your cart?',
                        showCancelButton: true,
                        confirmButtonText: 'Yes, Remove',
                        cancelButtonText: 'No, Keep It'
                    });
                    if (result.isConfirmed) {
                        removeProduct(productId);
                    }
                    return;
                }
                newQuantity = currentQuantity - 1;
            }

            try {
                const response = await fetch('/user/cart/update', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ productId, quantity: newQuantity })
                });

                const data = await response.json();
                if (!data.success) {
                    throw new Error(data.message || 'Failed to update quantity');
                }

                const subtotalElement = cartRow.querySelector('.subtotal');
                const priceElement = cartRow.querySelector('.product-price');

                const cartItem = data.cart.cart.find(item => item.productId._id === productId);
                const newPrice = cartItem.productId.salePrice;
                const newSubtotal = (newPrice * newQuantity).toFixed(2);

                priceElement.textContent = `â‚¹${newPrice.toFixed(2)}`;
                subtotalElement.textContent = `â‚¹${newSubtotal}`;
                quantityInput.value = newQuantity;

                const totalElements = document.querySelectorAll('.total-price');
                totalElements.forEach(element => {
                    element.textContent = `â‚¹${data.cart.totalPrice.toFixed(2)}`;
                });

            } catch (error) {
                console.error('Update Quantity Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message,
                    showConfirmButton: true
                });
            }
        }

        async function removeProduct(productId) {
            try {
                const response = await fetch(`/cart/remove/${productId}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });

                const data = await response.json();

                if (data.success) {
                    Swal.fire({
                        title: 'Removed!',
                        text: 'The product has been removed from your cart.',
                        icon: 'success',
                        timer: 5000,
                        showConfirmButton: true,
                        background: '#ffffff',
                        color: '#1a1a1a',
                        buttonsStyling: false,
                        timerProgressBar: true
                    });

                    const cartRow = document.querySelector(`.cart-row[data-product-id="${productId}"]`);
                    if (cartRow) cartRow.remove();

                    const totalElements = document.querySelectorAll('.total-price');
                    totalElements.forEach(element => {
                        element.textContent = `â‚¹${data.cart.totalPrice.toFixed(2)}`;
                    });

                    if (data.cart.cart.length === 0) {
                        window.location.reload();
                    }

                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Failed to remove',
                        text: data.message || 'Something went wrong.',
                        showConfirmButton: true
                    });
                }

            } catch (error) {
                console.error('Remove Product Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An unexpected error occurred. Please try again.',
                    showConfirmButton: true
                });
            }
        }

        document.querySelectorAll('.cart-row').forEach(row => {
            const productId = row.getAttribute('data-product-id');
            const decreaseBtn = row.querySelector('.decrease-btn');
            const increaseBtn = row.querySelector('.increase-btn');

            decreaseBtn.addEventListener('click', () => updateQuantity(productId, 'decrease'));
            increaseBtn.addEventListener('click', () => updateQuantity(productId, 'increase'));
        });
    </script>
</body>
</html>