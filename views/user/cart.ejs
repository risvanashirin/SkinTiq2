<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shopping Cart</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css" />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        .cart-container {
            margin-left: 280px;
            padding: 2rem;
        }
        .cart-row {
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 1rem;
            padding: 1rem;
            background: white;
            border-bottom: 1px solid #e5e7eb;
            border-radius: 0.5rem;
            margin-bottom: 1rem;
        }
        .cart-row img {
            width: 60px;
            height: 60px;
            object-fit: cover;
            border-radius: 0.5rem;
        }
        .quantity-control {
            display: flex;
            align-items: center;
            justify-content: space-between;
            width: 90px;
            border: 1px solid #d1d5db;
            border-radius: 0.375rem;
        }
        .quantity-control button {
            padding: 0.25rem 0.5rem;
            cursor: pointer;
            background-color: #f3f4f6;
            font-weight: bold;
        }
        .quantity-control input {
            width: 40px;
            text-align: center;
            border: none;
            outline: none;
        }
        .summary-section {
            background: white;
            padding: 1.5rem;
            border: 1px solid #e5e7eb;
            border-radius: 0.5rem;
        }
        .btn-checkout {
            background: #a1861f;
            color: #ffffff;
            padding: 0.75rem 1.5rem;
            border-radius: 9999px;
            font-weight: 600;
        }
        .btn-continue {
            background: #a1861f;
            border: 2px solid #fff8c2;
            color: #ffffff;
            padding: 0.75rem 1.5rem;
            border-radius: 9999px;
            font-weight: 600;
        }
        @media (max-width: 768px) {
            .cart-container {
                margin-left: 0;
            }
            .cart-row {
                flex-direction: column;
                align-items: flex-start;
            }
            .btn-container {
                flex-direction: column;
                gap: 1rem;
            }
        }
         input[type="number"]::-webkit-inner-spin-button,
        input[type="number"]::-webkit-outer-spin-button {
       -webkit-appearance: none;
        margin: 0;
        }

        input[type="number"] {
        -moz-appearance: textfield;
         }

    </style>
</head>
<body class="bg-gray-100">
    <%- include("../partials/user/sidebar.ejs") %>

    <button class="sidebar-toggle md:hidden fixed top-4 left-4 z-50 p-2 bg-gray-800 text-white rounded">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
    </button>

    <div class="cart-container mx-auto pt-24 md:pt-10">
        <h1 class="text-3xl font-bold mb-6 text-gray-800">Your Cart</h1>

        <% if (typeof error !== 'undefined' && error) { %>
            <p class="text-red-500 mb-4 bg-red-100 p-3 rounded"><%= error %></p>
        <% } %>

        <% if (!cart || cart.cart.length === 0) { %>
            <div class="bg-white p-6 rounded-lg border border-gray-200 text-center">
                <p class="text-gray-600 text-lg">Your cart is empty.</p>
                <a href="/shop" class="mt-4 inline-block bg-orange-500 text-white px-6 py-2 rounded-full hover:bg-orange-600 transition">Continue Shopping</a>
            </div>
        <% } else { %>
            <div class="flex flex-col md:flex-row gap-6">
                <div class="flex-1">
                    <% cart.cart.forEach(item => { %>
                        <div class="cart-row" data-product-id="<%= item.productId ? item.productId._id : '' %>">
                            <div class="flex-shrink-0">
                                <button onclick="removeProduct('<%= item.productId ? item.productId._id : '' %>')" class="text-gray-600 hover:text-red-500">
                                    <i class="fas fa-trash-alt"></i>
                                </button>
                            </div>
                            <div class="flex-shrink-0">
                                <% if (item.productId && item.productId.productImage && item.productId.productImage.length > 0) { %>
                                    <img src="<%= item.productId.productImage[0] %>" alt="<%= item.productId.productName || 'Product' %>">
                                <% } else { %>
                                    <div class="w-16 h-16 bg-gray-200 flex items-center justify-center">
                                        <span class="text-gray-500">No Image</span>
                                    </div>
                                <% } %>
                            </div>
                            <div class="flex-1">
                                <p class="text-gray-800">
                                    <%= item.productId ? item.productId.productName : 'Product Not Found' %>
                                </p>
                            </div>
                            <div class="w-20 text-center">
                                <p class="text-gray-800 product-price">
                                    ₹<%= item.productId && item.productId.salePrice ? item.productId.salePrice.toFixed(2) : 'N/A' %>
                                </p>
                            </div>


                            <!-- <div class="w-24">
                                <div class="quantity-control">
                                    <button type="button" class="decrease-btn text-gray-600">-</button>
                                    <input type="number" name="quantity" value="<%= item.quantity %>" min="1" class="quantity-input" readonly>
                                    <button type="button" class="increase-btn text-gray-600">+</button>
                                </div>
                            </div> -->

                                  <div class="w-24">
  <div class="quantity-control">
    <button type="button" class="decrease-btn text-gray-600">-</button>
    <input type="number" name="quantity" value="<%= item.quantity %>" min="1" class="quantity-input appearance-none" readonly>
    <button type="button" class="increase-btn text-gray-600">+</button>
  </div>
</div>

                            <div class="w-24 text-center">
                                <p class="text-gray-800 subtotal">
                                    ₹<%= item.productId && item.productId.salePrice ? (item.productId.salePrice * item.quantity).toFixed(2) : 'N/A' %>
                                </p>
                            </div>
                        </div>
                    <% }) %>
                </div>
                <div class="w-full md:w-80">
                    <div class="summary-section">
                        <div class="flex justify-between mb-2">
                            <p class="text-gray-600">Subtotal:</p>
                            <p class="text-gray-800 total-price">₹<%= cart.totalPrice ? cart.totalPrice.toFixed(2) : '0.00' %></p>
                        </div>
                        <div class="flex justify-between mb-2">
                            <p class="text-gray-600">Shipping:</p>
                            <p class="text-gray-800">₹0.00</p>
                        </div>
                        <div class="flex justify-between border-t pt-2">
                            <p class="text-gray-800 font-bold">Total:</p>
                            <p class="text-gray-800 font-bold total-price">₹<%= cart.totalPrice ? cart.totalPrice.toFixed(2) : '0.00' %></p>
                        </div>
                    </div>
                    <div class="btn-container flex justify-between mt-4">
                        <a href="/checkout" class="btn-checkout hover:bg-orange-600 transition">Check Out</a>
                        <a href="/shop" class="btn-continue hover:bg-orange-50 transition">Continue Shopping</a>
                    </div>
                </div>
            </div>
        <% } %>
    </div>

    <script>
        document.querySelector('.sidebar-toggle').addEventListener('click', () => {
            document.querySelector('.sidebar').classList.toggle('hidden');
        });

        async function updateQuantity(productId, action) {
            const cartRow = document.querySelector(`.cart-row[data-product-id="${productId}"]`);
            const quantityInput = cartRow.querySelector('.quantity-input');
            const currentQuantity = parseInt(quantityInput.value);
            const maxLimit = 5;
            let newQuantity = currentQuantity;

            if (action === 'increase') {
                if (currentQuantity >= maxLimit) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Maximum Limit Reached',
                        text: 'You can only add up to 5 of this item.',
                        showConfirmButton: true
                    });
                    return;
                }
                newQuantity = currentQuantity + 1;
            } else if (action === 'decrease') {
                if (currentQuantity <= 1) {
                    const result = await Swal.fire({
                        icon: 'warning',
                        title: 'Remove Item',
                        text: 'Do you want to remove this item from your cart?',
                        showCancelButton: true,
                        confirmButtonText: 'Yes, Remove',
                        cancelButtonText: 'No, Keep It'
                    });
                    if (result.isConfirmed) {
                        removeProduct(productId);
                    }
                    return;
                }
                newQuantity = currentQuantity - 1;
            }

            try {
                const response = await fetch('/user/cart/update', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ productId, quantity: newQuantity })
                });

                const data = await response.json();
                if (!data.success) {
                    throw new Error(data.message || 'Failed to update quantity');
                }

                const subtotalElement = cartRow.querySelector('.subtotal');
                const priceElement = cartRow.querySelector('.product-price');

                const cartItem = data.cart.cart.find(item => item.productId._id === productId);
                const newPrice = cartItem.productId.salePrice;
                const newSubtotal = (newPrice * newQuantity).toFixed(2);

                priceElement.textContent = `₹${newPrice.toFixed(2)}`;
                subtotalElement.textContent = `₹${newSubtotal}`;
                quantityInput.value = newQuantity;

                const totalElements = document.querySelectorAll('.total-price');
                totalElements.forEach(element => {
                    element.textContent = `₹${data.cart.totalPrice.toFixed(2)}`;
                });

            } catch (error) {
                console.error('Update Quantity Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message,
                    showConfirmButton: true
                });
            }
        }

        async function removeProduct(productId) {
            try {
                const response = await fetch(`/cart/remove/${productId}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });

                const data = await response.json();

                if (data.success) {
                    Swal.fire({
                        title: 'Removed!',
                        text: 'The product has been removed from your cart.',
                        icon: 'success',
                        timer: 5000,
                        showConfirmButton: true,
                        background: '#ffffff',
                        color: '#1a1a1a',
                        buttonsStyling: false,
                        timerProgressBar: true
                    });

                    const cartRow = document.querySelector(`.cart-row[data-product-id="${productId}"]`);
                    if (cartRow) cartRow.remove();

                    const totalElements = document.querySelectorAll('.total-price');
                    totalElements.forEach(element => {
                        element.textContent = `₹${data.cart.totalPrice.toFixed(2)}`;
                    });

                    if (data.cart.cart.length === 0) {
                        window.location.reload();
                    }

                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Failed to remove',
                        text: data.message || 'Something went wrong.',
                        showConfirmButton: true
                    });
                }

            } catch (error) {
                console.error('Remove Product Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An unexpected error occurred. Please try again.',
                    showConfirmButton: true
                });
            }
        }

        document.querySelectorAll('.cart-row').forEach(row => {
            const productId = row.getAttribute('data-product-id');
            const decreaseBtn = row.querySelector('.decrease-btn');
            const increaseBtn = row.querySelector('.increase-btn');

            decreaseBtn.addEventListener('click', () => updateQuantity(productId, 'decrease'));
            increaseBtn.addEventListener('click', () => updateQuantity(productId, 'increase'));
        });
    </script>
</body>
</html>