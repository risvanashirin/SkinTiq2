<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"/>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css" />
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap" rel="stylesheet"/>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" integrity="sha512-PRz6UXhMNSn1PMSEW1e+x3WWd6IV3T1Yi4mT0GHb+0hHbFEQKImI0lOJkUdR2e3bBQaz5tUCG+j5Tf+Y35I9Cw==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

    <style>
        body {
            font-family: 'Poppins', sans-serif;
            overflow-x: hidden;
        }
        :root {
            --accent-gradient: linear-gradient(45deg, #44351c, #efe10a);
            --accent-hover: linear-gradient(45deg, #3a2e17, #d6cc09);
            --danger-color: #dc2626;
            --danger-hover: #b91c1c;
            --success-color: #16a34a;
            --success-hover: #13843b;
        }
        .btn-gradient {
            background: var(--accent-gradient);
            border: none;
            color: #ffffff;
            transition: all 0.3s ease;
            text-decoration: none;
        }
        .btn-gradient:hover {
            background: var(--accent-hover);
            box-shadow: 0 4px 10px rgba(68, 53, 28, 0.3);
        }
        .btn-outline-gradient {
            border: 1px solid #44351c;
            color: #44351c;
            transition: all 0.3s ease;
        }
        .btn-outline-gradient:hover {
            background: var(--accent-gradient);
            color: #ffffff;
            box-shadow: 0 4px 10px rgba(68, 53, 28, 0.3);
        }
        .btn-outline-danger {
            border: 1px solid var(--danger-color);
            color: var(--danger-color);
            transition: all 0.3s ease;
        }
        .btn-outline-danger:hover {
            background: var(--danger-color);
            color: #ffffff;
            box-shadow: 0 4px 10px rgba(220, 38, 38, 0.3);
        }
        .btn-outline-success {
            border: 1px solid var(--success-color);
            color: var(--success-color);
            transition: all 0.3s ease;
        }
        .btn-outline-success:hover {
            background: var(--success-color);
            color: #ffffff;
            box-shadow: 0 4px 10px rgba(22, 163, 74, 0.3);
        }
        .error-message {
            color: var(--danger-color);
            font-size: 0.875rem;
            margin-top: 0.25rem;
            display: none;
        }
        .input-error {
            border-color: var(--danger-color);
        }
        .form-input {
            width: 100%;
            max-width: 100%;
            padding: 0.5rem;
            height: 40px;
            box-sizing: border-box;
            text-align: left;
            letter-spacing: normal;
            border: 1px solid #d1d5db;
            border-radius: 0.375rem;
            transition: border-color 0.2s;
        }
        .form-input:focus {
            border-color: #44351c;
            outline: none;
            box-shadow: 0 0 0 3px rgba(68, 53, 28, 0.2);
        }
        .sidebar-toggle {
            display: none;
            position: fixed;
            top: 1rem;
            left: 1rem;
            z-index: 60;
            background: var(--accent-gradient);
            color: #fff;
            padding: 0.6rem;
            border-radius: 8px;
            border: none;
            box-shadow: 0 2px 6px rgba(68, 53, 28, 0.2);
            transition: all 0.3s ease;
            cursor: pointer;
        }
        .sidebar-toggle:hover {
            background: var(--accent-hover);
            box-shadow: 0 4px 10px rgba(68, 53, 28, 0.3);
        }
        .sidebar-toggle svg {
            width: 20px;
            height: 20px;
            fill: #fff;
        }
        .main-content {
            background: linear-gradient(145deg, #ffffff, #f5f5f5);
            border: none;
            border-radius: 12px;
            padding: 2rem;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
            transition: margin-left 0.3s ease, box-shadow 0.3s ease;
            will-change: transform;
            position: fixed;
            max-width: min(100%, 954px);
            margin-top: 4vh;
            min-height: calc(92vh - 60rem);
            box-sizing: border-box;
            margin-left: 400px;
            position: sticky;
        }
        .main-content:hover {
            box-shadow: 0 6px 16px rgba(126, 107, 0, 0.15);
        }
        .right-section {
            max-height: calc(100vh - 4rem);
            overflow-y: auto;
            scrollbar-width: thin;
            scrollbar-color: var(--accent-gradient) #f3f4f6;
        }
        .right-section::-webkit-scrollbar {
            width: 8px;
        }
        .right-section::-webkit-scrollbar-track {
            background: #f3f4f6;
            border-radius: 4px;
        }
        .right-section::-webkit-scrollbar-thumb {
            background: var(--accent-gradient);
            border-radius: 4px;
        }
        .right-section::-webkit-scrollbar-thumb:hover {
            background: var(--accent-hover);
        }
        .order-row {
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 1rem;
            padding: 1rem;
            background: white;
            border-bottom: 1px solid #e5e7eb;
            border-radius: 0.5rem;
            margin-bottom: 1rem;
        }
        .order-row img {
            width: 40px;
            height: 60px;
            object-fit: cover;
            border-radius: 0.5rem;
        }
        .summary-section {
            background: white;
            padding: 1.5rem;
            border: 1px solid #e5e7eb;
            border-radius: 0.5rem;
        }
        .btn-place-order {
            background: var(--accent-gradient);
            color: #ffffff;
            padding: 0.75rem 1.25rem;
            border-radius: 7px;
            font-weight: 600;
            font-size: 0.875rem;
            border: none;
            transition: all 0.3s ease;
        }
        .btn-place-order:hover {
            background: var(--accent-hover);
            box-shadow: 0 4px 10px rgba(68, 53, 28, 0.3);
        }
        .btn-back {
            background: white;
            border: 1px solid #44351c;
            color: #44351c;
            padding: 0.75rem 1.25rem;
            border-radius: 7px;
            font-weight: 600;
            font-size: 0.875rem;
            transition: all 0.3s ease;
            text-decoration: none;
        }
        .btn-back:hover {
            background: var(--accent-gradient);
            color: #ffffff;
            box-shadow: 0 4px 10px rgba(68, 53, 28, 0.3);
        }
        .btn-add-address {
            background: var(--accent-gradient);
            color: #ffffff;
            padding: 0.5rem 1rem;
            border-radius: 7px;
            font-weight: 500;
            margin-top: 0.5rem;
            display: inline-block;
            border: none;
            transition: all 0.3s ease;
        }
        .btn-add-address:hover {
            background: var(--accent-hover);
            box-shadow: 0 4px 10px rgba(68, 53, 28, 0.3);
        }
        .address-section {
            border: 1px solid #e5e7eb;
            border-radius: 0.5rem;
            padding: 0.75rem;
            background: white;
        }
        .address-details {
            margin-top: 0.25rem;
            padding: 0.5rem;
            border: 1px solid #e5e7eb;
            border-radius: 0.5rem;
        }
        .address-details p {
            margin: 0.1rem 0;
            display: block;
            line-height: 1.5;
        }
        .custom-dropdown {
            position: relative;
            width: 100%;
        }
        .custom-dropdown-display {
            width: 100%;
            padding: 0.375rem 0.75rem;
            border: 1px solid #e5e7eb;
            border-radius: 0.5rem;
            background: white;
            display: flex;
            justify-content: space-between;
            align-items: center;
            cursor: pointer;
            font-size: 0.875rem;
            color: #6b7280;
            transition: border-color 0.3s ease;
        }
        .custom-dropdown-display.placeholder {
            color: #9ca3af;
        }
        .custom-dropdown-display:hover {
            border-color: #44351c;
        }
        .custom-dropdown-options {
            position: absolute;
            top: 100%;
            left: 0;
            right: 0;
            background: white;
            border: solid #bab5ad;
            border-radius: 0.5rem;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            max-height: 200px;
            overflow-y: auto;
            z-index: 10;
            display: none;
        }
        .custom-dropdown-options div {
            padding: 0.5rem 0.75rem;
            cursor: pointer;
            font-size: 0.875rem;
        }
        .custom-dropdown-options div:hover {
            background: #f3f4f6;
        }
        .summary-table {
            width: 100%;
            border-top: 1px solid #e5e7eb;
            padding-top: 1rem;
        }
        .summary-table div {
            display: flex;
            justify-content: space-between;
            padding: 0.5rem 0;
            font-size: 0.875rem;
        }
        .summary-table .total {
            border-top: 1px solid #e5e7eb;
            padding-top: 1rem;
            font-weight: 600;
            font-size: 1rem;
        }
        .tooltips {
            position: relative;
            cursor: pointer;
        }
        .tooltips .tooltip-text {
            visibility: hidden;
            width: 160px;
            background: rgb(90, 90, 90);
            color: #ffffff;
            text-align: center;
            /* border-radius: 0.5rem; */
            padding: 0.5rem;
            position: absolute;
            z-index: 1;
            bottom: 125%;
            left: 150%;
            transform: translateX(-50%);
            opacity: 0;
            transition: opacity 0.3s;
            font-size: 0.75rem;
        }
        .tooltips:hover .tooltip-text {
            visibility: visible;
            opacity: 1;
        }
        .coupon-section {
            margin-top: 1rem;
            padding: 1rem;
            border: 1px dashed #44351c;
            border-radius: 0.5rem;
            background: #fff8c2;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }
        .coupon-header {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-bottom: 0.75rem;
            font-weight: 600;
            color: #44351c;
        }
        .coupon-input {
            display: flex;
            gap: 0.5rem;
            align-items: center;
            box-sizing: border-box;
        }
        .coupon-input input {
            flex: 1;
            padding: 0.5rem;
            border: 1px solid #d1d5db;
            border-radius: 0.5rem;
            font-size: 0.875rem;
            background: white;
            transition: border-color 0.2s;
            height: 2.25rem;
            width: 175px;
        }
        .coupon-input input:focus {
            border-color: #44351c;
            outline: none;
        }
        .coupon-input button {
            background: var(--accent-gradient);
            color: #ffffff;
            padding: 0 1rem;
            border-radius: 7px;
            font-size: 0.875rem;
            font-weight: 500;
            transition: all 0.3s ease;
            width: 4rem;
            height: 2.25rem;
            display: flex;
            align-items: center;
            justify-content: center;
            box-sizing: border-box;
            border: none;
        }
        .coupon-input button:hover {
            background: var(--accent-hover);
            box-shadow: 0 4px 10px rgba(68, 53, 28, 0.3);
        }
        .coupon-input .remove-btn {
            background: var(--danger-color);
        }
        .coupon-input .remove-btn:hover {
            background: var(--danger-hover);
            box-shadow: 0 4px 10px rgba(220, 38, 38, 0.3);
        }
        .coupon-dropdown {
            position: relative;
            width: 100%;
            margin-top: 0.75rem;
        }
        .coupon-dropdown-display {
            width: 100%;
            padding: 0.5rem;
            border: 1px solid #d1d5db;
            border-radius: 0.5rem;
            background: white;
            display: flex;
            justify-content: space-between;
            align-items: center;
            cursor: pointer;
            font-size: 0.875rem;
            color: #374151;
            transition: border-color 0.3s ease;
        }
        .coupon-dropdown-display:hover {
            border-color: #44351c;
        }
        .coupon-options {
            position: absolute;
            top: 100%;
            left: 0;
            right: 0;
            background: white;
            border: 1px solid #44351c;
            border-radius: 0.5rem;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            max-height: 180px;
            overflow-y: auto;
            z-index: 10;
            display: none;
            margin-top: 0.25rem;
        }
        .coupon-options div {
            padding: 0.5rem 0.75rem;
            margin: 0.25rem;
            border: 1px dashed #d1d5db;
            border-radius: 0.375rem;
            cursor: pointer;
            font-size: 0.875rem;
            color: #374151;
            background: white;
            transition: background-color 0.2s;
        }
        .coupon-options div.referral-coupon {
            background: #e6fffa;
        }
        .coupon-options div:hover {
            background: #f9fafb;
        }
        .coupon-options div.referral-coupon:hover {
            background: #d1fae5;
        }
        .coupon-options .text-xs {
            line-height: 1.25rem;
        }
        .coupon-type {
            font-size: 0.75rem;
            color: #0b54e8;
            margin-left: 0.5rem;
        }
        .referral-badge {
            background: var(--success-color);
            color: #ffffff;
            padding: 0.2rem 0.5rem;
            border-radius: 9999px;
            font-size: 0.75rem;
            margin-left: 0.5rem;
        }
        @media (max-width: 768px) {
            .main-content {
                margin: 0 auto;
                padding: 1.5rem;
                border-radius: 10px;
                margin-top: 10vh;
                min-height: calc(90vh - 2rem);
                max-width: min(100%, 800px);
            }
            .main-content.sidebar-open {
                margin-left: min(220px, 70vw);
                max-width: min(100%, 800px);
            }
            .right-section {
                max-height: none;
            }
            .order-row {
                flex-direction: column;
                align-items: flex-start;
            }
            .btn-container {
                flex-direction: column;
                gap: 1rem;
            }
            .coupon-input {
                flex-direction: column;
                align-items: stretch;
            }
            .coupon-input button {
                width: 100%;
                height: 2.25rem;
            }
            .coupon-input input {
                width: 100%;
            }
            .sidebar-toggle {
                display: block;
            }
            .sidebar-partial.open ~ .sidebar-toggle {
                display: none;
            }
        }
        @media (max-width: 480px) {
            .main-content {
                padding: 1rem;
                border-radius: 8px;
                margin-top: 8vh;
                min-height: calc(88vh - 2rem);
                max-width: min(100%, 800px);
            }
            .main-content.sidebar-open {
                margin-left: min(180px, 65vw);
                max-width: min(100%, 800px);
            }
            .sidebar-toggle {
                padding: 0.5rem;
            }
            .sidebar-toggle svg {
                width: 18px;
                height: 18px;
            }
        }
        @media (max-width: 320px) {
            .main-content {
                padding: 0.8rem;
                border-radius: 6px;
                max-width: min(100%, 800px);
            }
            .main-content.sidebar-open {
                margin-left: min(160px, 60vw);
                max-width: min(100%, 800px);
            }
        }
        #addressModal {
            overflow-y: auto;
        }
        .modal-content {
            max-height: 80vh;
            overflow-y: auto;
            position: relative;
            background: #ffffff;
            border-radius: 12px;
            box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);
            width: 100%;
            max-width: 500px;
            margin: 1rem;
        }
        .modal-header {
            background: var(--accent-gradient);
            color: #ffffff;
            padding: 1rem 1.5rem;
            border-top-left-radius: 12px;
            border-top-right-radius: 12px;
            position: relative;
        }
        .modal-close {
            position: absolute;
            top: 1rem;
            right: 1rem;
            background: none;
            border: none;
            color: #ffffff;
            font-size: 1.25rem;
            cursor: pointer;
            transition: color 0.2s ease;
        }
        .modal-close:hover {
            color: #e5e7eb;
        }
        .modal-body {
            padding: 1.5rem;
        }
        .modal-footer {
            padding: 1rem 1.5rem;
            border-top: 1px solid #e5e7eb;
            display: flex;
            justify-content: flex-end;
            gap: 0.5rem;
        }
    </style>
</head>
<body class="bg-gray-100">
    <!-- Include Sidebar -->
    <%- include("../partials/user/sidebar.ejs") %>

    <!-- Mobile Toggle Button -->
    <button class="sidebar-toggle" aria-label="Toggle sidebar">
        <svg viewBox="0 0 24 24" aria-hidden="true">
            <path d="M3 6h18v2H3V6zm0 5h18v2H3v-2zm0 5h18v2H3v-2z"/>
        </svg>
    </button>

    <!-- Main Content -->
    <div class="main-content p-6">
        <h1 class="text-3xl font-bold mb-6 text-gray-800 text-center">Checkout</h1>

        <% if (typeof error !== 'undefined' && error) { %>
            <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6" role="alert">
                <%= error %>
            </div>
        <% } %>

        <% if (typeof success !== 'undefined' && success) { %>
            <div class="bg-green-100 p-6 rounded-lg border border-green-200 text-center">
                <p class="text-green-600 text-lg">Address added successfully!</p>
                <a href="/checkout" class="mt-4 inline-block btn-gradient px-6 py-2 rounded text-white transition">Back to Checkout</a>
        <% } else if (!cart || cart.length === 0) { %>
            <div class="bg-white p-6 rounded-lg border border-gray-200 text-center">
                <p class="text-gray-600 text-lg">Your cart is empty.</p>
                <div class="mt-4 flex justify-center gap-4">
                    <a href="/shop" class="inline-block btn-gradient px-6 py-2 rounded text-white transition">Continue Shopping</a>
                </div>
            </div>
        <% } else { %>
            <form action="/place-order" method="POST" id="placeOrderForm">
                <div class="flex flex-col md:flex-row gap-6">
                    <!-- Checkout Form -->
                    <div class="flex-1">
                        <div class="bg-white p-6 rounded-lg border border-gray-200">
                            <h2 class="text-2xl font-semibold text-gray-800 mb-4">Shipping Address</h2>
                            <button type="button" onclick="openModal(null)" class="btn-add-address transition mb-4">Add New Address</button>
                          <!-- Address Selection -->
<% 
    let defaultAddress = null;
    let defaultAddressId = '';
    if (addresses && addresses.length > 0) {
        const flatAddresses = addresses.reduce((acc, doc) => acc.concat(doc.address), []);
        const sortedAddresses = flatAddresses.sort((a, b) => {
            const typeA = (a.addressType || 'N/A').toLowerCase();
            const typeB = (b.addressType || 'N/A').toLowerCase();
            return typeB.localeCompare(typeA);
        });
        defaultAddress = sortedAddresses.find(address => address.isPrimary) || sortedAddresses[0];
        defaultAddressId = defaultAddress ? defaultAddress._id.toString() : '';
    }
%>
<% if (addresses && addresses.length > 0) { %>
    <div class="mb-4 address-section">
        <select id="addressSelect" class="hidden" onchange="displayAddressDetails(this)" required>
            <option value=""></option>
            <% 
                const flatAddresses = addresses.reduce((acc, doc) => acc.concat(doc.address), []);
                flatAddresses.forEach((address) => { 
            %>
                <option value="<%= address._id %>" <%= defaultAddressId === address._id.toString() ? 'selected' : '' %>><%= `${address.addressType || 'N/A'}: ${address.name}, ${address.landMark}, ${address.city}, ${address.state}, ${address.pincode}` %></option>
            <% }) %>
        </select>
        <div class="custom-dropdown">
            <div class="custom-dropdown-display <%= !defaultAddress ? 'placeholder' : '' %>" onclick="toggleDropdown()">
                <span id="dropdownDisplay"><%= defaultAddress ? `${defaultAddress.addressType || 'N/A'}: ${defaultAddress.name}, ${defaultAddress.landMark}, ${defaultAddress.city}, ${defaultAddress.state}, ${defaultAddress.pincode}` : 'Select an address' %></span>
                <svg class="w-4 h-4 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
            </div>
            <div class="custom-dropdown-options" id="dropdownOptions">
                <% flatAddresses.forEach((address) => { %>
                    <div onclick="selectAddress('<%= address._id %>', '<%= `${address.addressType || 'N/A'}: ${address.name}, ${address.landMark}, ${address.city}, ${address.state}, ${address.pincode}` %>')"><%= `${address.addressType || 'N/A'}: ${address.name}, ${address.landMark}, ${address.city}, ${address.state}, ${address.pincode}` %></div>
                <% }) %>
            </div>
        </div>
        <div id="addressDetails" class="address-details <%= defaultAddressId ? '' : 'hidden' %>">
            <% flatAddresses.forEach((address) => { %>
                <div id="address-<%= address._id %>" class="address-details-content <%= defaultAddressId === address._id.toString() ? '' : 'hidden' %>">
                    <div class="flex justify-between items-start">
                        <div>
                            <p class="font-semibold text-blue-500 text-sm"><%= address.addressType || 'N/A' %></p>
                            <p class="font-semibold text-gray-800 text-sm"><%= address.name %></p>
                            <p class="text-gray-600 text-sm"><%= address.landMark %></p>
                            <p class="text-gray-600 text-sm"><%= address.city %>, <%= address.state %>, <%= address.pincode %></p>
                            <p class="text-gray-600 text-sm">INDIA</p>
                            <p class="text-gray-600 text-sm">Phone: <%= address.phone %></p>
                            <% if (address.altPhone) { %>
                                <p class="text-gray-600 text-sm">Alt Phone: <%= address.altPhone %></p>
                            <% } %>
                        </div>
                        <div class="flex flex-col gap-2">
                            <button type="button" onclick='openModal(<%- JSON.stringify(address) %>)' class="btn-outline-gradient px-3 py-1 rounded text-sm"><i class="fas fa-pen"></i></button>
                            <input type="radio" name="selectedAddressRadio" value="<%= address._id %>" class="mt-1 hidden" <%= defaultAddressId === address._id.toString() ? 'checked' : '' %> required>
                        </div>
                    </div>
                </div>
            <% }) %>
        </div>
    </div>
<% } else { %>
    <p class="text-gray-500 mb-4">No saved addresses found. Please add an address.</p>
<% } %>

                            <!-- Hidden inputs for order calculations -->
                            <input type="hidden" id="selectedAddressInput" name="selectedAddress" value="<%= defaultAddressId %>" />
                            <input type="hidden" name="discount" value="<%= discount %>">
                            <input type="hidden" name="couponDiscount" id="couponDiscountInput" value="<%= couponDiscount %>">
                            <input type="hidden" name="gst" value="<%= gst %>">
                            <input type="hidden" name="shippingCharge" value="<%= shippingCharge %>">
                            <input type="hidden" name="finalPrice" id="finalPriceInput" value="<%= finalPrice %>">
                            <input type="hidden" name="totalPrice" value="<%= totalPrice %>">
                            <input type="hidden" id="couponCodeInput" name="couponCode" value="<%= appliedCoupon ? appliedCoupon.name : '' %>">
                            <input type="hidden" id="totalAmountInput" name="totalAmount" value="<%= finalPrice %>">
                        </div>
                    </div>
                    <!-- Order Summary -->
                    <div class="w-full md:w-80 right-section">
                        <div class="summary-section">
                            <h2 class="text-2xl font-semibold mb-4 text-gray-800">Order Summary</h2>
                            <!-- Coupon Section -->
                            <div class="coupon-section">
                                <div class="coupon-header">
                                    <i class="fas fa-ticket-alt text-lg"></i>
                                    <span>Apply Coupon</span>
                                </div>
                                <div class="coupon-input">
                                    <input type="text" id="couponInput" placeholder="Enter coupon code" value="<%= appliedCoupon ? appliedCoupon.name : '' %>" readonly>
                                    <button type="button" id="couponButton" class="<%= appliedCoupon ? 'remove-btn' : '' %>" onclick="<%= appliedCoupon ? 'removeCoupon()' : 'applyCoupon()' %>">
                                        <%= appliedCoupon ? 'Remove' : 'Apply' %>
                                    </button>
                                </div>
                                <div class="coupon-dropdown">
                                    <div class="coupon-dropdown-display" onclick="toggleCouponDropdown()">
                                        <span id="couponDropdownDisplay"><%= appliedCoupon ? `${appliedCoupon.name} - ₹${appliedCoupon.offerPrice} off` : 'Select a coupon' %></span>
                                        <svg class="w-4 h-4 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                                        </svg>
                                    </div>
                                    <div class="coupon-options" id="couponOptions">
                                        <% if (coupons && coupons.length > 0) { %>
                                            <% coupons.forEach(coupon => { %>
                                                <div class="<%= coupon.userId.length > 0 ? 'referral-coupon' : '' %>" onclick="selectCoupon('<%= coupon.name %>', <%= coupon.offerPrice %>, <%= coupon.minimumPrice %>, <%= coupon.userId.length > 0 ? 'true' : 'false' %>)">
                                                    <span class="font-medium">
                                                        <%= coupon.name %> - ₹<%= coupon.offerPrice %> Off
                                                        <span class="text-gray-500 text-xs">
                                                            (Min ₹<%= coupon.minimumPrice %><%= coupon.userId.length > 0 ? ', Referral' : '' %>)
                                                        </span>
                                                    </span>
                                                </div>
                                            <% }) %>
                                        <% } else { %>
                                            <div>No coupons available</div>
                                        <% } %>
                                    </div>
                                </div>
                            </div>
                            <% if (cart && cart.length > 0) { %>
                                <% cart.forEach(item => { %>
                                    <div class="order-row">
                                        <div class="flex-shrink-0">
                                            <% if (item.productId && item.productId.productImage && item.productId.productImage.length > 0) { %>
                                                <img src="<%= item.productId.productImage[0] %>" alt="<%= item.productId.productName || 'Product' %>">
                                            <% } else { %>
                                                <div class="w-16 h-16 bg-gray-200 flex items-center justify-center">
                                                    <span class="text-gray-500">No Image</span>
                                                </div>
                                            <% } %>
                                        </div>
                                        <div class="flex-1">
                                            <p class="text-gray-800">
                                                <%= item.productId ? item.productId.productName : 'Product Not Found' %>
                                            </p>
                                        </div>
                                        <div class="w-20 text-center">
                                            <p class="text-gray-800">x<%= item.quantity %></p>
                                        </div>
                                        <div class="w-24 text-center">
                                            <p class="text-gray-800">
                                                ₹<%= item.productId && item.productId.salePrice ? (item.productId.salePrice * item.quantity).toFixed(2) : 'N/A' %>
                                            </p>
                                        </div>
                                    </div>
                                <% }) %>
                            <% } %>
                            <div class="summary-table">
                                <div>
                                    <span class="text-gray-600">Subtotal</span>
                                    <span class="text-gray-800">₹<%= totalPrice ? totalPrice.toFixed(2) : '0.00' %></span>
                                </div>
                                <div>
                                    <span class="tooltips text-gray-600">
                                        Discount <i class="fas fa-info-circle text-black-500" style="font-size: 10px;"></i>
                                        <span class="tooltip-text">10% off for orders above ₹1500</span>
                                    </span>
                                    <span id="discount" class="text-green-600">₹<%= discount.toFixed(2) %></span>
                                </div>
                                <div id="couponDiscountRow" style="<%= couponDiscount > 0 ? 'display: flex;' : 'display: none;' %>">
                                    <span class="text-gray-600">Coupon Discount</span>
                                    <span id="couponDiscountAmount" class="text-green-600">₹<%= couponDiscount.toFixed(2) %></span>
                                </div>
                                <div>
                                    <span class="tooltips text-gray-600">
                                        GST  <i class="fas fa-info-circle text-black-500" style="font-size: 10px;"></i>
                                        <span class="tooltip-text">₹10 for orders above ₹2000</span>
                                    </span>
                                    <span id="gst" class="text-gray-600">₹<%= gst.toFixed(2) %></span>
                                </div>
                                <div>
                                    <span class="tooltips text-gray-600">
                                        Shipping  <i class="fas fa-info-circle text-black-100 " style="font-size: 10px;"></i>
                                        <span class="tooltip-text">Fixed ₹20 shipping charge per order</span>
                                    </span>
                                    <span id="shippingCharge" class="text-gray-600">₹<%= shippingCharge.toFixed(2) %></span>
                                </div>
                                <div class="total">
                                    <span class="text-gray-800">Total</span>
                                    <span id="finalTotal" class="text-gray-800">₹<%= finalPrice.toFixed(2) %></span>
                                </div>
                            </div>
                            <!-- Payment Method -->
                            <h2 class="text-2xl font-semibold mb-4 text-gray-800 mt-4">Payment Method</h2>
                            <div class="mb-4">
                                <label class="flex items-center mb-2">
                                    <input type="radio" name="paymentMethod" value="RazorPay" class="mr-2 payment-option">
                                    <span class="text-gray-700">Online Payment</span>
                                </label>
                                <label class="flex items-center mb-2">
                                    <input type="radio" name="paymentMethod" value="COD" class="mr-2 payment-option" checked>
                                    <span class="text-gray-700">Cash on Delivery</span>
                                </label>
                                <label class="flex items-center mb-2">
                                    <input type="radio" name="paymentMethod" value="Wallet" class="mr-2 payment-option">
                                    <span class="text-gray-700">Wallet <span id="walletBalance" class="text-gray-500 text-sm"></span></span>
                                </label>
                            </div>
                            <!-- Hidden inputs -->
                            <input type="hidden" id="totalAmountInput" name="totalAmount" value="<%= finalPrice %>" />
                            <div class="btn-container flex justify-between mt-4">
                                <button type="submit" class="btn-place-order">Place Order</button>
                                <a href="/cart" class="btn-back">Back to Cart</a>
                            </div>
                        </div>
                    </div>
                </div>
            </form>
        <% } %>
    </div>

    <!-- Address Modal -->
    <div id="addressModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
        <div class="modal-content">
            <div class="modal-header">
                <h2 id="modalTitle" class="text-xl font-bold">Add New Address</h2>
                <button class="modal-close" onclick="closeModal()" aria-label="Close modal">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="modal-body">
                <form id="addressForm" action="/add-address" method="POST" class="space-y-4" novalidate>
                    <input type="hidden" name="_id" id="_id">
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Address Type *</label>
                        <select name="addressType" id="addressType" required class="form-input">
                            <option value="" disabled selected>Select address type</option>
                            <option value="Home">Home</option>
                            <option value="Work">Work</option>
                        </select>
                        <p id="addressTypeError" class="error-message">Please select an address type.</p>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Name *</label>
                        <input type="text" name="name" id="name" required class="form-input">
                        <p id="nameError" class="error-message">Name must be 2-50 characters and contain only letters and spaces.</p>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">City *</label>
                        <input type="text" name="city" id="city" required class="form-input">
                        <p id="cityError" class="error-message">City must be 2-50 characters and contain only letters and spaces.</p>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Landmark *</label>
                        <input type="text" name="landMark" id="landMark" required class="form-input">
                        <p id="landMarkError" class="error-message">Landmark must be 3-100 characters.</p>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">State *</label>
                        <input type="text" name="state" id="state" required class="form-input">
                        <p id="stateError" class="error-message">State must be 2-50 characters and contain only letters and spaces.</p>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Pincode *</label>
                        <input type="text" name="pincode" id="pincode" required class="form-input" maxlength="6" oninput="restrictPincode(this)">
                        <p id="pincodeError" class="error-message">Pincode must be exactly 6 digits.</p>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Phone *</label>
                        <input type="text" name="phone" id="phone" required class="form-input" maxlength="10" oninput="restrictPhone(this)">
                        <p id="phoneError" class="error-message">Phone must be a valid 10-digit number.</p>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Alternate Phone</label>
                        <input type="text" name="altPhone" id="altPhone" class="form-input" maxlength="10" oninput="restrictPhone(this)">
                        <p id="altPhoneError" class="error-message">Alternate phone must be a valid 10-digit number and different from the primary phone.</p>
                    </div>
                    <div class="flex items-center">
                        <input type="checkbox" name="isPrimary" id="isPrimary" class="mr-2 focus:ring-yellow-500 rounded">
                        <label class="text-sm font-medium text-gray-700">Set as Primary</label>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" onclick="closeModal()" class="btn btn-outline-secondary px-4 py-2 rounded">Cancel</button>
                <button type="submit" id="submitButton" class="btn-gradient px-4 py-2 rounded text-white" form="addressForm">Add</button>
            </div>
        </div>
    </div>
    <script>
        let appliedCoupon = <%= appliedCoupon ? JSON.stringify(appliedCoupon) : 'null' %>;
        let totalPrice = <%= totalPrice %>;
        let currentDiscount = <%= discount %>;
        let currentCouponDiscount = <%= couponDiscount %>;
        let currentGst = <%= gst %>;
        let currentShipping = <%= shippingCharge %>;
        let finalPrice = <%= finalPrice %>;
        let walletBalance = 0;
        const availableCoupons = <%- JSON.stringify(coupons) %>;

        function restrictPincode(input) {
            input.value = input.value.replace(/[^0-9]/g, '').slice(0, 6);
        }

        function restrictPhone(input) {
            input.value = input.value.replace(/[^0-9]/g, '').slice(0, 10);
        }

        // Fetch wallet balance on page load
        async function fetchWalletBalance() {
            try {
                const response = await fetch('/get-wallet-balance', {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' },
                });
                const data = await response.json();
                if (data.success) {
                    walletBalance = data.balance;
                    document.getElementById('walletBalance').textContent = `(₹${data.balance.toFixed(2)})`;
                } else {
                    document.getElementById('walletBalance').textContent = '(₹0.00)';
                }
            } catch (error) {
                console.error('Error fetching wallet balance:', error);
                document.getElementById('walletBalance').textContent = '(₹0.00)';
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            fetchWalletBalance();

            const navLinks = document.querySelectorAll('.sidebar-partial nav a');
            const currentPath = window.location.pathname;
            const toggleButton = document.querySelector('.sidebar-toggle');
            const closeButton = document.querySelector('.sidebar-close');
            const sidebar = document.querySelector('.sidebar-partial');
            const mainContent = document.querySelector('.main-content');

            // Ensure sidebar is hidden and toggle is visible on load for mobile
            if (window.innerWidth <= 768) {
                sidebar.classList.remove('open');
                mainContent.classList.remove('sidebar-open');
                toggleButton.style.display = 'block';
            }

            // Set active link based on current path
            navLinks.forEach(link => {
                link.classList.remove('active');
                if (link.getAttribute('href') === currentPath) {
                    link.classList.add('active');
                }
            });

            // Toggle sidebar open
            if (toggleButton && sidebar && mainContent) {
                toggleButton.addEventListener('click', () => {
                    sidebar.classList.add('open');
                    mainContent.classList.add('sidebar-open');
                    toggleButton.style.display = 'none';
                });
            }

            // Close sidebar
            if (closeButton && sidebar && mainContent) {
                closeButton.addEventListener('click', () => {
                    sidebar.classList.remove('open');
                    mainContent.classList.remove('sidebar-open');
                    toggleButton.style.display = 'block';
                    sidebar.offsetHeight; // Trigger reflow
                });
            }

            // Handle window resize to maintain consistent state
            window.addEventListener('resize', () => {
                if (window.innerWidth > 768) {
                    sidebar.classList.remove('open');
                    mainContent.classList.remove('sidebar-open');
                    toggleButton.style.display = 'none';
                } else {
                    if (!sidebar.classList.contains('open')) {
                        toggleButton.style.display = 'block';
                    }
                }
            });
        });

        function openModal(address) {
            const modal = document.getElementById('addressModal');
            const form = document.getElementById('addressForm');
            const modalTitle = document.getElementById('modalTitle');
            const submitButton = document.getElementById('submitButton');

            resetFormValidation();

            if (!modal || !form || !modalTitle || !submitButton) return;

            if (address) {
                modalTitle.textContent = 'Edit Address';
                form.action = `/edit-address-checkout/${address._id}`;
                submitButton.textContent = 'Update';
                document.getElementById('_id').value = address._id || '';
                document.getElementById('addressType').value = address.addressType || '';
                document.getElementById('name').value = address.name || '';
                document.getElementById('city').value = address.city || '';
                document.getElementById('landMark').value = address.landMark || '';
                document.getElementById('state').value = address.state || '';
                document.getElementById('pincode').value = address.pincode || '';
                document.getElementById('phone').value = address.phone || '';
                document.getElementById('altPhone').value = address.altPhone || '';
                document.getElementById('isPrimary').checked = address.isPrimary || false;
            } else {
                modalTitle.textContent = 'Add New Address';
                form.action = '/add-address-checkout';
                submitButton.textContent = 'Add';
                form.reset();
                document.getElementById('_id').value = '';
                document.getElementById('addressType').value = '';
                document.getElementById('pincode').value = '';
                document.getElementById('phone').value = '';
                document.getElementById('altPhone').value = '';
            }

            modal.classList.remove('hidden');
        }

        function closeModal() {
            const modal = document.getElementById('addressModal');
            if (modal) modal.classList.add('hidden');
            resetFormValidation();
            document.getElementById('addressForm').reset();
            document.getElementById('addressType').value = '';
            document.getElementById('pincode').value = '';
            document.getElementById('phone').value = '';
            document.getElementById('altPhone').value = '';
        }

        function resetFormValidation() {
            const inputs = document.querySelectorAll('#addressForm input, #addressForm select');
            const errors = document.querySelectorAll('.error-message');
            inputs.forEach(input => input.classList.remove('input-error'));
            errors.forEach(error => error.style.display = 'none');
        }

        document.getElementById('addressForm').addEventListener('submit', function (e) {
            e.preventDefault();
            let isValid = true;

            resetFormValidation();

            const name = document.getElementById('name').value.trim();
            const city = document.getElementById('city').value.trim();
            const landMark = document.getElementById('landMark').value.trim();
            const state = document.getElementById('state').value.trim();
            const pincode = document.getElementById('pincode').value.trim();
            const phone = document.getElementById('phone').value.trim();
            const altPhone = document.getElementById('altPhone').value.trim();
            const addressType = document.getElementById('addressType').value.trim();

            const nameRegex = /^[a-zA-Z\s]{2,50}$/;
            if (!name || !nameRegex.test(name)) {
                document.getElementById('nameError').style.display = 'block';
                document.getElementById('name').classList.add('input-error');
                isValid = false;
            }

            const cityRegex = /^[a-zA-Z\s]{2,50}$/;
            if (!city || !cityRegex.test(city)) {
                document.getElementById('cityError').style.display = 'block';
                document.getElementById('city').classList.add('input-error');
                isValid = false;
            }

            if (!landMark || landMark.length < 3 || landMark.length > 100) {
                document.getElementById('landMarkError').style.display = 'block';
                document.getElementById('landMark').classList.add('input-error');
                isValid = false;
            }

            const stateRegex = /^[a-zA-Z\s]{2,50}$/;
            if (!state || !stateRegex.test(state)) {
                document.getElementById('stateError').style.display = 'block';
                document.getElementById('state').classList.add('input-error');
                isValid = false;
            }

            const pincodeRegex = /^\d{6}$/;
            if (!pincode || !pincodeRegex.test(pincode)) {
                document.getElementById('pincodeError').style.display = 'block';
                document.getElementById('pincode').classList.add('input-error');
                isValid = false;
            }

            const phoneRegex = /^\d{10}$/;
            if (!phone || !phoneRegex.test(phone)) {
                document.getElementById('phoneError').style.display = 'block';
                document.getElementById('phone').classList.add('input-error');
                isValid = false;
            }

            if (altPhone && !phoneRegex.test(altPhone)) {
                document.getElementById('altPhoneError').style.display = 'block';
                document.getElementById('altPhone').classList.add('input-error');
                isValid = false;
            }

            if (altPhone && altPhone === phone) {
                document.getElementById('altPhoneError').style.display = 'block';
                document.getElementById('altPhoneError').textContent = 'Alternate phone must be different from the primary phone.';
                document.getElementById('altPhone').classList.add('input-error');
                isValid = false;
            }

            if (!addressType) {
                document.getElementById('addressTypeError').style.display = 'block';
                document.getElementById('addressType').classList.add('input-error');
                isValid = false;
            }

            if (isValid) {
                this.submit();
            }
        });

        function toggleDropdown() {
            const options = document.getElementById('dropdownOptions');
            if (options) options.style.display = options.style.display === 'block' ? 'none' : 'block';
        }

        function selectAddress(addressId, addressText) {
            const select = document.getElementById('addressSelect');
            const display = document.getElementById('dropdownDisplay');
            const displayContainer = document.querySelector('.custom-dropdown-display');
            const selectedAddressInput = document.getElementById('selectedAddressInput');
            if (select && display && displayContainer && selectedAddressInput) {
                select.value = addressId;
                display.textContent = addressText;
                displayContainer.classList.remove('placeholder');
                selectedAddressInput.value = addressId;
                displayAddressDetails(select);
                toggleDropdown();
            }
        }

        function displayAddressDetails(select) {
            const addressDetails = document.getElementById('addressDetails');
            const selectedAddressId = select.value;
            const allAddressDetails = document.querySelectorAll('.address-details-content');

            if (!addressDetails) return;

            allAddressDetails.forEach(detail => detail.classList.add('hidden'));

            if (selectedAddressId) {
                const selectedAddressDetail = document.getElementById(`address-${selectedAddressId}`);
                if (selectedAddressDetail) {
                    selectedAddressDetail.classList.remove('hidden');
                    addressDetails.classList.remove('hidden');
                    const radioInput = selectedAddressDetail.querySelector('input[name="selectedAddressRadio"]');
                    if (radioInput) radioInput.checked = true;
                }
            } else {
                addressDetails.classList.add('hidden');
            }
        }

        function toggleCouponDropdown() {
            const options = document.getElementById('couponOptions');
            if (options) options.style.display = options.style.display === 'block' ? 'none' : 'block';
        }

        function updateCouponDropdown() {
            const couponOptions = document.getElementById('couponOptions');
            if (!couponOptions) return;

            couponOptions.innerHTML = '';

            const filteredCoupons = appliedCoupon
                ? availableCoupons.filter(coupon => coupon.name !== appliedCoupon.name)
                : availableCoupons;

            if (filteredCoupons.length === 0) {
                couponOptions.innerHTML = '<div class="p-3 text-gray-500 text-sm">No coupons available</div>';
            } else {
                filteredCoupons.forEach(coupon => {
                    const div = document.createElement('div');
                    div.className = `p-0.5 0.75rem m-1 border border-dashed border-gray-300 rounded-md cursor-pointer ${coupon.userId.length > 0 ? 'referral-coupon' : ''}`;
                    div.innerHTML = `
                        <span class="font-medium">
                            ${coupon.name} - ₹${coupon.offerPrice} Off
                            <span class="text-gray-500 text-xs">
                                (Min ₹${coupon.minimumPrice}${coupon.userId.length > 0 ? ', Referral' : ''})
                            </span>
                        </span>
                    `;
                    div.onclick = () => selectCoupon(coupon.name, coupon.offerPrice, coupon.minimumPrice, coupon.userId.length > 0);
                    couponOptions.appendChild(div);
                });
            }
        }

        function selectCoupon(code, offerPrice, minimumPrice, isReferral) {
            if (totalPrice < minimumPrice) {
                Swal.fire('Error', `This coupon requires a minimum purchase of ₹${minimumPrice}.`, 'error');
                return;
            }
            document.getElementById('couponInput').value = code;
            applyCoupon();
        }

        async function applyCoupon() {
            const couponCode = document.getElementById('couponInput').value.trim();
            if (!couponCode) {
                Swal.fire('Error', 'Please enter a coupon code.', 'error');
                return;
            }

            try {
                const response = await fetch('/apply-coupon', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ couponCode, cartTotal: totalPrice }),
                });
                const data = await response.json();

                if (data.success) {
                    appliedCoupon = data.coupon;
                    currentDiscount = data.discount;
                    currentCouponDiscount = data.couponDiscount;
                    finalPrice = data.finalPrice;
                    document.getElementById('couponDiscountRow').style.display = 'flex';
                    document.getElementById('couponDiscountAmount').textContent = `₹${data.couponDiscount.toFixed(2)}`;
                    document.getElementById('finalTotal').textContent = `₹${finalPrice.toFixed(2)}`;
                    document.getElementById('totalAmountInput').value = finalPrice;
                    document.getElementById('couponDiscountInput').value = data.couponDiscount;
                    document.getElementById('couponCodeInput').value = couponCode;
                    document.getElementById('couponButton').textContent = 'Remove';
                    document.getElementById('couponButton').classList.add('remove-btn');
                    document.getElementById('couponButton').onclick = removeCoupon;
                    document.getElementById('couponDropdownDisplay').textContent = `${couponCode} - ₹${data.couponDiscount} off`;
                    updateCouponDropdown();
                    Swal.fire('Success', data.message, 'success');
                } else {
                    Swal.fire('Error', data.message, 'error');
                }
            } catch (error) {
                console.error('Error applying coupon:', error);
                Swal.fire('Error', 'Failed to apply coupon.', 'error');
            }
        }

        async function removeCoupon() {
            try {
                const response = await fetch('/remove-coupon', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                });
                const data = await response.json();

                if (data.success) {
                    appliedCoupon = null;
                    currentDiscount = data.discount;
                    currentCouponDiscount = 0;
                    finalPrice = data.finalPrice;
                    document.getElementById('couponDiscountRow').style.display = 'none';
                    document.getElementById('couponDiscountAmount').textContent = '₹0.00';
                    document.getElementById('finalTotal').textContent = `₹${finalPrice.toFixed(2)}`;
                    document.getElementById('totalAmountInput').value = finalPrice;
                    document.getElementById('couponDiscountInput').value = 0;
                    document.getElementById('couponCodeInput').value = '';
                    document.getElementById('couponInput').value = '';
                    document.getElementById('couponButton').textContent = 'Apply';
                    document.getElementById('couponButton').classList.remove('remove-btn');
                    document.getElementById('couponButton').onclick = applyCoupon;
                    document.getElementById('couponDropdownDisplay').textContent = 'Select a coupon';
                    updateCouponDropdown();
                    Swal.fire('Success', data.message, 'success');
                } else {
                    Swal.fire('Error', data.message, 'error');
                }
            } catch (error) {
                console.error('Error removing coupon:', error);
                Swal.fire('Error', 'Failed to remove coupon.', 'error');
            }
        }


        

        async function fetchCartTotal(callback) {
            try {
                const response = await $.ajax({
                    url: '/cart/total',
                    method: 'GET',
                    dataType: 'json'
                });
                console.log('fetchCartTotal: Response', response);
                if (response.success) {
                    totalPrice = response.totalPrice;
                    currentDiscount = totalPrice > 1500 ? totalPrice * 0.1 : 0;
                    currentGst = totalPrice > 2000 ? 10 : 0;
                    currentShipping = 20;
                    currentCouponDiscount = appliedCoupon ? appliedCoupon.offerPrice : 0;
                    finalPrice = totalPrice - currentDiscount - currentCouponDiscount + currentGst + currentShipping;

                    $('#finalTotal').text(`₹${finalPrice.toFixed(2)}`);
                    $('#totalAmountInput').val(finalPrice);
                    $('#discount').text(`₹${currentDiscount.toFixed(2)}`);
                    $('#gst').text(`₹${currentGst.toFixed(2)}`);
                    $('#shippingCharge').text(`₹${currentShipping.toFixed(2)}`);
                    if (currentCouponDiscount > 0) {
                        $('#couponDiscountRow').css('display', 'flex');
                        $('#couponDiscountAmount').text(`₹${currentCouponDiscount.toFixed(2)}`);
                        $('#couponDiscountInput').val(currentCouponDiscount);
                    } else {
                        $('#couponDiscountRow').css('display', 'none');
                        $('#couponDiscountInput').val(0);
                    }
                    console.log('fetchCartTotal: Updated totals', { totalPrice, currentDiscount, currentGst, currentShipping, currentCouponDiscount, finalPrice });
                    callback(finalPrice);
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: response.message || 'Failed to fetch cart total.'
                    });
                }
            } catch (error) {
                console.error('fetchCartTotal: Error', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to connect to server for cart total.'
                });
            }
        }




       async function handleRazorpayPayment(e, finalPrice) {
    e.preventDefault();

    const selectedAddress = $('#selectedAddressInput').val();
    const couponCode = $('#couponCodeInput').val();

    if (!selectedAddress) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Please select a shipping address.'
        });
        return;
    }

    try {
        // 🔹 STEP 1: Check cart stock before Razorpay
        const quantityCheckRes = await fetch('/checkquantity', { method: 'POST' });
        const quantityData = await quantityCheckRes.json();

        if (!quantityData.success) {
            let errorMsg = quantityData.message || 'Stock mismatch found.';
            if (quantityData.items?.length) {
                errorMsg += '\n\n' + quantityData.items
                    .map(item => `${item.name}: Requested ${item.requested}, Available ${item.available}`)
                    .join('\n');
            }

            Swal.fire({
                icon: 'error',
                title: 'Stock Issue',
                text: errorMsg
            }).then(() => {
                window.location.href = '/cart';
            });
            return;
        }

        // 🔹 STEP 2: Refresh session if needed
        await fetch('/refresh-session', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ userId: '<%= locals.user ? user._id : "" %>' })
        }).catch(err => console.log('Session refresh failed:', err));

        // 🔹 STEP 3: Fetch updated cart total before payment
        await fetchCartTotal(async function (updatedFinalPrice) {
            finalPrice = updatedFinalPrice;

            $.ajax({
                url: '/razorpay/create-order',
                method: 'POST',
                data: { amount: finalPrice },
                dataType: 'json',
                success: function (response) {
                    if (!response.success) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: response.message || 'Failed to create Razorpay order.'
                        });
                        return;
                    }

                    if (typeof Razorpay === 'undefined') {
                        console.error('Razorpay SDK not loaded.');
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Payment gateway not available. Please try again later.'
                        });
                        return;
                    }

                    const options = {
                        key: '<%= process.env.RAZORPAY_KEY_ID %>',
                        amount: response.order.amount,
                        currency: 'INR',
                        name: 'Skintiq',
                        description: 'Order Payment',
                        order_id: response.order.id,
                        handler: async function (razorpayResponse) {
                            console.log('Razorpay payment successful:', razorpayResponse);
                            try {
                                const formData = {
                                    selectedAddress,
                                    paymentMethod: 'RazorPay',
                                    totalAmount: finalPrice,
                                    razorpayPaymentId: razorpayResponse.razorpay_payment_id,
                                    orderId: response.order.id,
                                    razorpay_signature: razorpayResponse.razorpay_signature
                                };
                                if (couponCode) formData.couponCode = couponCode;

                                const orderResponse = await $.ajax({
                                    url: '/place-order',
                                    method: 'POST',
                                    data: formData,
                                    dataType: 'json'
                                });

                                if (orderResponse.success) {
                                    Swal.fire({
                                        icon: 'success',
                                        title: 'Success',
                                        text: orderResponse.message
                                    }).then(() => {
                                        window.location.href = orderResponse.redirect || `/order-confirmation/${orderResponse.orderId}`;
                                    });
                                } else {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Error',
                                        text: orderResponse.message || 'Order placement failed.'
                                    }).then(() => {
                                        if (orderResponse.redirect) {
                                            window.location.href = orderResponse.redirect;
                                        } else {
                                            retryPayment(finalPrice, selectedAddress, couponCode);
                                        }
                                    });
                                }
                            } catch (error) {
                                console.error('Error finalizing order:', error);
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error',
                                    text: 'Failed to finalize order.'
                                });
                                window.location.href = `/order-failed/${response.order.id}`;
                            }
                        },
                        prefill: {
                            name: '<%= locals.user ? user.name : "" %>',
                            email: '<%= locals.user ? user.email : "" %>',
                            contact: '<%= locals.user ? user.phone : "" %>'
                        },
                        theme: {
                            color: '#44351c'
                        }
                    };

                    const razorpay = new Razorpay(options);

                    razorpay.on('payment.failed', async function (response) {
                        console.error('Razorpay payment failed:', response.error);
                        try {
                            const formData = {
                                selectedAddress,
                                paymentMethod: 'RazorPay',
                                totalAmount: finalPrice,
                                orderId: response.error.metadata.order_id
                            };
                            if (couponCode) formData.couponCode = couponCode;

                            const failResponse = await $.ajax({
                                url: '/place-order',
                                method: 'POST',
                                data: formData,
                                dataType: 'json'
                            });

                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: failResponse.message || 'Payment failed.'
                            });
                            window.location.href = failResponse.redirect || `/order-failed/${response.error.metadata.order_id}`;
                        } catch (error) {
                            console.error('Error notifying backend of failure:', error);
                            window.location.href = `/order-failed/${response.error.metadata.order_id}`;
                        }
                    });

                    razorpay.on('payment.closed', async function () {
                        console.warn('Razorpay payment modal closed');
                        try {
                            const formData = {
                                selectedAddress,
                                paymentMethod: 'RazorPay',
                                totalAmount: finalPrice,
                                orderId: response.order.id
                            };
                            if (couponCode) formData.couponCode = couponCode;

                            const failResponse = await $.ajax({
                                url: '/place-order',
                                method: 'POST',
                                data: formData,
                                dataType: 'json'
                            });

                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: failResponse.message || 'Payment was cancelled.'
                            });
                            window.location.href = failResponse.redirect || `/order-failed/${response.order.id}`;
                        } catch (error) {
                            console.error('Error notifying backend of cancellation:', error);
                            window.location.href = `/order-failed/${response.order.id}`;
                        }
                    });

                    console.log('Opening Razorpay modal with options:', {
                        key: options.key,
                        amount: options.amount,
                        order_id: options.order_id
                    });
                    razorpay.open();
                },
                error: function (xhr, status, error) {
                    console.error('Error creating Razorpay order:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Failed to initiate payment. Please try again.'
                    });
                }
            });
        });
    } catch (error) {
        console.error('Error initiating Razorpay payment:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to initiate payment. Please check your connection or try again later.'
        });
    }
}





       async function handleWalletPayment(e, finalPrice) {
    e.preventDefault();

    const selectedAddress = $('#selectedAddressInput').val();
    const couponCode    = $('#couponCodeInput').val();

    if (!selectedAddress) {
        Swal.fire({ icon: 'error', title: 'Error', text: 'Please select a shipping address.' });
        return;
    }

    /* 🔹 1. Check quantity before anything else */
    try {
        const qtyRes  = await fetch('/checkquantity', { method: 'POST' });
        const qtyData = await qtyRes.json();

        if (!qtyData.success) {
            let msg = qtyData.message || 'Stock mismatch found.';
            if (qtyData.items?.length) {
                msg += '\n\n' + qtyData.items
                    .map(i => `${i.name}: Requested ${i.requested}, Available ${i.available}`)
                    .join('\n');
            }
            Swal.fire({ icon: 'error', title: 'Stock Issue', text: msg })
                .then(() => window.location.href = '/cart');
            return;
        }
    } catch (err) {
        console.error('Quantity check failed:', err);
        Swal.fire({ icon: 'error', title: 'Error', text: 'Could not verify stock. Try again.' });
        return;
    }

    /* 🔹 2. Wallet balance validation (before refresh) */
    if (walletBalance < finalPrice) {
        Swal.fire({ icon: 'error', title: 'Error', text: 'Insufficient wallet balance. Please add funds.' });
        return;
    }

    try {
        /* 🔹 3. Refresh session */
        await fetch('/refresh-session', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ userId: '<%= locals.user ? user._id : "" %>' })
        }).catch(err => console.log('Session refresh failed:', err));

        /* 🔹 4. Re‑fetch cart total & re‑validate wallet balance */
        await fetchCartTotal(async updatedPrice => {
            finalPrice = updatedPrice;

            if (walletBalance < finalPrice) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Insufficient wallet balance after cart update.'
                });
                return;
            }

            /* 🔹 5. Place order */
            const formData = {
                selectedAddress,
                paymentMethod: 'Wallet',
                totalAmount: finalPrice
            };
            if (couponCode) formData.couponCode = couponCode;

            try {
                const orderRes = await $.ajax({
                    url: '/place-order',
                    method: 'POST',
                    data: formData,
                    dataType: 'json'
                });

                if (orderRes.success) {
                    Swal.fire({ icon: 'success', title: 'Success', text: orderRes.message })
                        .then(() => window.location.href =
                            orderRes.redirect || `/order-confirmation/${orderRes.orderId}`);
                } else {
                    Swal.fire({ icon: 'error', title: 'Error', text: orderRes.message || 'Order failed.' })
                        .then(() => {
                            if (orderRes.redirect) window.location.href = orderRes.redirect;
                        });
                }
            } catch (err) {
                console.error('Error placing wallet order:', err);
                Swal.fire({ icon: 'error', title: 'Error', text: 'Failed to place order using wallet.' });
            }
        });
    } catch (err) {
        console.error('Wallet flow error:', err);
        Swal.fire({ icon: 'error', title: 'Error', text: 'Failed to initiate wallet payment. Try again.' });
    }
}

        async function retryPayment(finalPrice, selectedAddress, couponCode) {
            Swal.fire({
                title: 'Retry Payment?',
                text: 'Would you like to retry the payment with a new order?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#44351c',
                cancelButtonColor: '#dc2626',
                confirmButtonText: 'Yes, retry'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Force a page reload to reset session/cart state
                    window.location.href = '/checkout';
                }
            });
        }

        $('#placeOrderForm').on('submit', function (e) {
            e.preventDefault();
            const paymentMethod = $('input[name="paymentMethod"]:checked').val();
            const selectedAddress = $('#selectedAddressInput').val();

            if (!selectedAddress) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Please select a shipping address.'
                });
                return;
            }

            if (!paymentMethod) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Please select a payment method.'
                });
                return;
            }

            fetchCartTotal(function (finalPrice) {
                if (paymentMethod === 'COD') {
                    if (finalPrice > 1000) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Cash on Delivery is not available for orders above ₹1000. Please choose another payment method.'
                        });
                        return;
                    }
                    const formData = {
                        selectedAddress,
                        paymentMethod,
                        totalAmount: finalPrice
                    };
                    const couponCode = $('#couponCodeInput').val();
                    if (couponCode) {
                        formData.couponCode = couponCode;
                    }

                    $.ajax({
                        url: '/place-order',
                        method: 'POST',
                        data: formData,
                        dataType: 'json',
                        success: function (data) {
                            console.log('Order response:', data);

                            if (data.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Success',
                                text: data.message
                            }).then(() => {
                                window.location.href = data.redirect || `/order-confirmation/${data.orderId}`;
                            });
                            }
                        },
                        error: function (xhr) {
                            console.error('Error placing order:', xhr);

                            let data;
                            try {
                            data = JSON.parse(xhr.responseText); // parse backend JSON
                            } catch (e) {
                            data = {};
                            }

                            if (data.message && data.message.toLowerCase().includes('out of stock')) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Out of Stock',
                                text: ' product quantity mismatch.',
                                confirmButtonText: 'Go to Cart'
                            }).then(() => {
                                if (data.redirect) {
                                window.location.href = '/cart';
                                }
                            });
                            } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: data.message || 'Failed to place order. Please try again.'
                            });
                            }
                        }
});

                } else if (paymentMethod === 'RazorPay') {
                    handleRazorpayPayment(e, finalPrice);
                } else if (paymentMethod === 'Wallet') {
                    handleWalletPayment(e, finalPrice);
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Invalid payment method selected.'
                    });
                }
            });
        });

        // Initialize address selection
        const addressSelect = document.getElementById('addressSelect');
        if (addressSelect) {
            displayAddressDetails(addressSelect);
        }

        // Initialize coupon order
        updateCouponDropdown();
         // Display SweetAlert2 for adjusted quantities
  <% if (typeof adjustedQuantities !== 'undefined' && adjustedQuantities && adjustedQuantities.length > 0) { %>
    Swal.fire({
        icon: 'info',
        title: 'Cart Updated',
        html: `
            The following items in your cart have been adjusted due to stock changes:
            <ul class="list-disc pl-5 mt-2">
                <% adjustedQuantities.forEach(item => { %>
                    <li><%= item.name %>: Quantity changed from <%= item.oldQuantity %> to <%= item.newQuantity %></li>
                <% }) %>
            </ul>
        `,
        showConfirmButton: true,
        confirmButtonText: 'OK',
        background: '#ffffff',
        color: '#1a1a1a',
    });
<% } %>


    </script>
</body>
</html>