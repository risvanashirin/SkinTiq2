<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Address Management</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <style>
        .bgblack {
            background: #a1861f;
        }
        .error-message {
            color: #dc2626;
            font-size: 0.875rem;
            margin-top: 0.25rem;
            display: none;
        }
        .input-error {
            border-color: #dc2626;
        }
    </style>
</head>

<body class="bg-gray-100">
    <!-- Include Sidebar -->
    <%- include("../partials/user/sidebar.ejs") %>

    <!-- Mobile Toggle Button -->
    <button class="sidebar-toggle">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
    </button>

    <!-- Main Content -->
    <div class="container mx-auto p-4 ml-0 md:ml-64" style="width: 1200px;">
        <h1 class="text-2xl font-bold mb-4 text-gray-800">Manage Addresses</h1>
        <button onclick="openModal(null)" class="bgblack text-white px-4 py-2 rounded mb-4 hover:bg-yellow-700 transition">Add New Address</button>

        <% if (typeof error !== 'undefined' && error) { %>
            <p class="text-red-500 mb-4"><%= error %></p>
        <% } %>

        <div class="grid gap-4">
            <% addresses.forEach(address => { %>
                <div class="border border-gray-200 p-4 rounded-lg shadow-md bg-white hover:shadow-lg transition">
                    <div class="flex justify-between items-start">
                        <div>
                            <p class="font-semibold text-gray-800"><%= address.name %></p>
                            <p class="text-gray-600"><%= address.addressType || 'N/A' %></p>
                            <p class="text-gray-600"><%= address.city %>, <%= address.state %> <%= address.pincode %></p>
                            <p class="text-gray-600"><%= address.landMark %></p>
                            <p class="text-gray-600">Phone: <%= address.phone %></p>
                            <% if (address.altPhone) { %>
                                <p class="text-gray-600">Alt Phone: <%= address.altPhone %></p>
                            <% } %>
                            <% if (address.isPrimary) { %>
                                <p class="text-green-600 font-semibold">Primary Address</p>
                            <% } %>
                        </div>
                        <div class="flex gap-2">
                            <button onclick='openModal(<%- JSON.stringify(address) %>)' class="bgblack text-white px-3 py-1 rounded hover:bg-yellow-600 transition">Edit</button>
                            <form action="/delete-address/<%= address._id %>" method="POST" onsubmit="return confirm('Are you sure you want to delete this address?');">
                                <button type="submit" class="bgblack text-white px-3 py-1 rounded hover:bg-red-600 transition">Delete</button>
                            </form>
                            <% if (!address.isPrimary) { %>
                                <form action="/set-primary-address/<%= address._id %>" method="POST">
                                    <button type="submit" class="bgblack text-white px-3 py-1 rounded hover:bg-green-600 transition">Set Primary</button>
                                </form>
                            <% } %>
                        </div>
                    </div>
                </div>
            <% }) %>
        </div>

        <!-- Modal -->
        <div id="addressModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
            <div class="bg-white p-6 rounded-lg w-full max-w-md">
                <h2 id="modalTitle" class="text-xl font-bold mb-4 text-gray-800">Add New Address</h2>
                <form id="addressForm" action="/add-address" method="POST" class="space-y-4" novalidate>
                    <input type="hidden" name="_id" id="_id">
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Address Type</label>
                        <input type="text" name="addressType" id="addressType" placeholder="e.g., Home, Work" class="w-full p-2 border rounded focus:ring-yellow-500 focus:border-yellow-500">
                        <p id="addressTypeError" class="error-message">Address type must be 3-20 characters.</p>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Name *</label>
                        <input type="text" name="name" id="name" required class="w-full p-2 border rounded focus:ring-yellow-500 focus:border-yellow-500">
                        <p id="nameError" class="error-message">Name must be 2-50 characters and contain only letters and spaces.</p>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">City *</label>
                        <input type="text" name="city" id="city" required class="w-full p-2 border rounded focus:ring-yellow-500 focus:border-yellow-500">
                        <p id="cityError" class="error-message">City must be 2-50 characters and contain only letters and spaces.</p>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Landmark *</label>
                        <input type="text" name="landMark" id="landMark" required class="w-full p-2 border rounded focus:ring-yellow-500 focus:border-yellow-500">
                        <p id="landMarkError" class="error-message">Landmark must be 3-100 characters.</p>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">State *</label>
                        <input type="text" name="state" id="state" required class="w-full p-2 border rounded focus:ring-yellow-500 focus:border-yellow-500">
                        <p id="stateError" class="error-message">State must be 2-50 characters and contain only letters and spaces.</p>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Pincode *</label>
                        <input type="number" name="pincode" id="pincode" required class="w-full p-2 border rounded focus:ring-yellow-500 focus:border-yellow-500">
                        <p id="pincodeError" class="error-message">Pincode must be exactly 6 digits.</p>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Phone *</label>
                        <input type="text" name="phone" id="phone" required class="w-full p-2 border rounded focus:ring-yellow-500 focus:border-yellow-500">
                        <p id="phoneError" class="error-message">Phone must be a valid 10-digit number.</p>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Alternate Phone</label>
                        <input type="text" name="altPhone" id="altPhone" class="w-full p-2 border rounded focus:ring-yellow-500 focus:border-yellow-500">
                        <p id="altPhoneError" class="error-message">Alternate phone must be a valid 10-digit number.</p>
                    </div>
                    <div class="flex items-center">
                        <input type="checkbox" name="isPrimary" id="isPrimary" class="mr-2 focus:ring-yellow-500">
                        <label class="text-sm font-medium text-gray-700">Set as Primary</label>
                    </div>
                    <div class="flex justify-end gap-2">
                        <button type="button" onclick="closeModal()" class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600 transition">Cancel</button>
                        <button type="submit" id="submitButton" class="bg-yellow-600 text-white px-4 py-2 rounded hover:bg-yellow-700 transition">Add</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script>
        function openModal(address) {
            const modal = document.getElementById('addressModal');
            const form = document.getElementById('addressForm');
            const modalTitle = document.getElementById('modalTitle');
            const submitButton = document.getElementById('submitButton');

            // Reset form validation
            resetFormValidation();

            if (address) {
                // Edit mode
                modalTitle.textContent = 'Edit Address';
                form.action = `/edit-address/${address._id}`;
                submitButton.textContent = 'Update';
                document.getElementById('_id').value = address._id || '';
                document.getElementById('addressType').value = address.addressType || '';
                document.getElementById('name').value = address.name || '';
                document.getElementById('city').value = address.city || '';
                document.getElementById('landMark').value = address.landMark || '';
                document.getElementById('state').value = address.state || '';
                document.getElementById('pincode').value = address.pincode || '';
                document.getElementById('phone').value = address.phone || '';
                document.getElementById('altPhone').value = address.altPhone || '';
                document.getElementById('isPrimary').checked = address.isPrimary || false;
            } else {
                // Add mode
                modalTitle.textContent = 'Add New Address';
                form.action = '/add-address';
                submitButton.textContent = 'Add';
                form.reset();
                document.getElementById('_id').value = '';
            }

            modal.classList.remove('hidden');
        }

        function closeModal() {
            const modal = document.getElementById('addressModal');
            modal.classList.add('hidden');
            resetFormValidation();
        }

        function resetFormValidation() {
            const inputs = document.querySelectorAll('#addressForm input');
            const errors = document.querySelectorAll('.error-message');
            inputs.forEach(input => input.classList.remove('input-error'));
            errors.forEach(error => error.style.display = 'none');
        }

        // Form validation
        document.getElementById('addressForm').addEventListener('submit', function (e) {
            e.preventDefault();
            let isValid = true;

            // Reset previous validation
            resetFormValidation();

            // Validation rules
            const name = document.getElementById('name').value.trim();
            const city = document.getElementById('city').value.trim();
            const landMark = document.getElementById('landMark').value.trim();
            const state = document.getElementById('state').value.trim();
            const pincode = document.getElementById('pincode').value.trim();
            const phone = document.getElementById('phone').value.trim();
            const altPhone = document.getElementById('altPhone').value.trim();
            const addressType = document.getElementById('addressType').value.trim();

            // Name validation
            const nameRegex = /^[a-zA-Z\s]{2,50}$/;
            if (!name || !nameRegex.test(name)) {
                document.getElementById('nameError').style.display = 'block';
                document.getElementById('name').classList.add('input-error');
                isValid = false;
            }

            // City validation
            const cityRegex = /^[a-zA-Z\s]{2,50}$/;
            if (!city || !cityRegex.test(city)) {
                document.getElementById('cityError').style.display = 'block';
                document.getElementById('city').classList.add('input-error');
                isValid = false;
            }

            // Landmark validation
            if (!landMark || landMark.length < 3 || landMark.length > 100) {
                document.getElementById('landMarkError').style.display = 'block';
                document.getElementById('landMark').classList.add('input-error');
                isValid = false;
            }

            // State validation
            const stateRegex = /^[a-zA-Z\s]{2,50}$/;
            if (!state || !stateRegex.test(state)) {
                document.getElementById('stateError').style.display = 'block';
                document.getElementById('state').classList.add('input-error');
                isValid = false;
            }

            // Pincode validation
            const pincodeRegex = /^\d{6}$/;
            if (!pincode || !pincodeRegex.test(pincode)) {
                document.getElementById('pincodeError').style.display = 'block';
                document.getElementById('pincode').classList.add('input-error');
                isValid = false;
            }

            // Phone validation
            const phoneRegex = /^\d{10}$/;
            if (!phone || !phoneRegex.test(phone)) {
                document.getElementById('phoneError').style.display = 'block';
                document.getElementById('phone').classList.add('input-error');
                isValid = false;
            }

            // Alternate phone validation (optional, but must be valid if provided)
            if (altPhone && !phoneRegex.test(altPhone)) {
                document.getElementById('altPhoneError').style.display = 'block';
                document.getElementById('altPhone').classList.add('input-error');
                isValid = false;
            }

            // Address type validation (optional, but must be valid if provided)
            if (addressType && (addressType.length < 3 || addressType.length > 20)) {
                document.getElementById('addressTypeError').style.display = 'block';
                document.getElementById('addressType').classList.add('input-error');
                isValid = false;
            }

            // Submit if valid
            if (isValid) {
                this.submit();
            }
        });
    </script>
</body>
</html>